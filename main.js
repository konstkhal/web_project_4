!function(){"use strict";class e{constructor(e,t,s,i,r){var n,o;o=()=>this._cardTemplate.cloneNode(!0),(n="_getTemplate")in this?Object.defineProperty(this,n,{value:o,enumerable:!0,configurable:!0,writable:!0}):this[n]=o,this._cardSelector=t,this._id=e._id,this._ownerId=e.owner._id,this._userId=e.user_id,this._likesCount=e.likes.length,this._likesList=e.likes,this._cardTemplate=this._cardSelector.content.querySelector(".photo-grid__item"),this._handleTrashButtonClick=i,this._handleCardClick=s,this._handleLikeButtonClick=r,this._name=e.namePlace,this._link=e.linkPlace,this._alt="Picture of ".concat(e.namePlace)}_setEventListeners(){this._cardLikeButtonElement.addEventListener("click",(e=>this._handleLikeButtonClick(this._id))),this._cardTrashButtonElement.addEventListener("click",(()=>this._handleTrashButtonClick(this._id))),this._cardImageElement.addEventListener("click",(()=>this._handleCardClick()))}getIsLiked(){return this._isLiked()}updateLikes(e){this._likesList=e,this._renderLikes()}_isLiked(){return this._likesList.some((e=>e._id===this._userId))}_renderLikes(){const e=this._likesList.length;this._cardLikesCounterElement.textContent=e,this._isLiked()?this._cardLikeButtonElement.classList.add("photo-grid__like-button_active"):this._cardLikeButtonElement.classList.remove("photo-grid__like-button_active")}generateCard(){return this._element=this._getTemplate(),this._cardTitleElement=this._element.querySelector(".photo-grid__title"),this._cardImageElement=this._element.querySelector(".photo-grid__image"),this._cardLikeButtonElement=this._element.querySelector(".photo-grid__like-button"),this._cardTrashButtonElement=this._element.querySelector(".photo-grid__delete-button"),this._cardLikesCounterElement=this._element.querySelector(".photo-grid__likes-counter"),this._cardImageElement.src=this._link,this._cardImageElement.alt=this._name,this._cardTitleElement.textContent=this._name,this._setEventListeners(),this._ownerId!==this._userId&&this._element.querySelector(".photo-grid__delete-button").remove(),this._renderLikes(),this._element}removeCard(){this._element.remove(),this._element=null}}function t(e,t,s){return t in e?Object.defineProperty(e,t,{value:s,enumerable:!0,configurable:!0,writable:!0}):e[t]=s,e}var s=class{constructor(e,s){t(this,"_setEventListeners",(()=>{this._toggleButton(),this._inputList.forEach((e=>{e.addEventListener("input",(()=>{this._сheckInputValidity(e),this._toggleButton()}))}))})),t(this,"_showInputError",(e=>{const t=this._element.querySelector("#".concat(e.id,"-error"));t.textContent=e.validationMessage,t.classList.add(this._config.errorClass),e.classList.add(this._config.inputErrorClass)})),t(this,"_hideInputError",(e=>{const t=this._element.querySelector("#".concat(e.id,"-error"));t.textContent="",t.classList.remove(this._config.errorClass),e.classList.remove(this._config.inputErrorClass)})),t(this,"_сheckInputValidity",(e=>{e.validity.valid?this._hideInputError(e):this._showInputError(e)})),this._config={...e},this._element=s,this._buttonElement=this._element.querySelector(this._config.submitButtonSelector),this._inputList=Array.from(this._element.querySelectorAll(this._config.inputSelector))}_toggleButton(){this._hasValidInputs()?this._buttonElement.disabled=!1:this._buttonElement.disabled=!0}_hasValidInputs(){return this._inputList.every((e=>!0===e.validity.valid))}enableValidation(){this._element.addEventListener("submit",(e=>{e.preventDefault()})),this._setEventListeners()}resetValidation(){this._element.reset(),this._inputList.forEach((e=>{this._hideInputError(e)})),this._toggleButton()}};const i={inputSelector:".form__input",submitButtonSelector:".form__submit-button",inactiveButtonClass:"button_blocked",inputErrorClass:"form__input-error",errorClass:"form__input-error_visible"},r=document.querySelector(".profile__link-change_place_profile"),n=document.querySelector(".profile__link-add"),o=document.querySelector(".profile__link-change_place_image"),a=document.querySelector(".form__input_type_name"),l=".profile__role",c=(document.querySelector(l),document.querySelector(".form__input_type_role"));document.querySelector(".form__input_type_image-title"),document.querySelector(".form__input_type_image-link");class h{constructor(e){var t,s;s=e=>{"Escape"===e.key&&(e.preventDefault(),this.close())},(t="_handleEscClose")in this?Object.defineProperty(this,t,{value:s,enumerable:!0,configurable:!0,writable:!0}):this[t]=s,this._popupElement=document.querySelector(e)}setEventListeners(){this._popupElement.addEventListener("mousedown",(e=>{(e.target.classList.contains("popup")||e.target.classList.contains("popup__close-button"))&&this.close()}))}open(){this._popupElement.classList.add("popup_opened"),document.addEventListener("keydown",this._handleEscClose)}close(){this._popupElement.classList.remove("popup_opened"),document.removeEventListener("keydown",this._handleEscClose)}}class u extends h{constructor(e,t){super(e),this._popupForm=this._popupElement.querySelector(".form"),this._submitButton=this._popupForm.querySelector(".form__submit-button"),this.handleFormSubmit=t,this._inputsArray=[...this._popupForm.querySelectorAll(".form__input")]}renderLoading(e){e?(this._submitButton.textContent="Saving...",this._submitButton.disabled=!0):(this._submitButton.textContent="Save",this._submitButton.disabled=!1)}getPopupForm(){return this._popupForm}_getInputValues(){const e={};return this._inputsArray.forEach((t=>{e[t.name]=t.value})),e}setEventListeners(){super.setEventListeners(),this._popupForm.addEventListener("submit",(()=>{this.handleFormSubmit(this._getInputValues())}))}close(){super.close(),this._popupForm.reset()}}const _=document.querySelector("#card-template");let d;const p=t=>{const s=new e(t,_,(()=>{E.open(t.linkPlace,t.namePlace)}),(e=>{k.open();try{k.setAction((()=>{k.renderLoading(!0),m.deleteCard(e).then((e=>{s.removeCard(),k.close()}))}))}catch(e){console.log(e)}k.renderLoading(!1)}),(e=>{s.getIsLiked()?m.disLikeCard(e).then((e=>{s.updateLikes(e.likes)})):m.likeCard(e).then((e=>{s.updateLikes(e.likes)}))}));return s.generateCard()},m=new class{constructor(e){let{baseUrl:t,headers:s}=e;var i,r;r=async(e,t)=>{const s=await fetch(e,t);return s.ok?s.json():Promise.reject(s.statusText)},(i="_customFetch")in this?Object.defineProperty(this,i,{value:r,enumerable:!0,configurable:!0,writable:!0}):this[i]=r,this._baseUrl=t,this._headers=s}getInitialCards(){return this._customFetch("".concat(this._baseUrl,"/cards"),{headers:this._headers})}getUserInfo(){return this._customFetch("".concat(this._baseUrl,"/users/me"),{headers:this._headers})}setAvatarLink(e){return this._customFetch("".concat(this._baseUrl,"/users/me/avatar"),{headers:this._headers,method:"PATCH",body:JSON.stringify({avatar:e})})}setUserInfo(e){return this._customFetch("".concat(this._baseUrl,"/users/me"),{headers:this._headers,method:"PATCH",body:JSON.stringify(e)})}createCard(e){return this._customFetch("".concat(this._baseUrl,"/cards"),{headers:this._headers,method:"POST",body:JSON.stringify(e)})}deleteCard(e){return this._customFetch("".concat(this._baseUrl,"/cards/").concat(e),{headers:this._headers,method:"DELETE"})}likeCard(e){return this._customFetch("".concat(this._baseUrl,"/cards/likes/").concat(e),{headers:this._headers,method:"PUT"})}disLikeCard(e){return this._customFetch("".concat(this._baseUrl,"/cards/likes/").concat(e),{headers:this._headers,method:"DELETE"})}}({baseUrl:"https://around.nomoreparties.co/v1/group-12",headers:{authorization:"cfbd7707-a110-44ae-8aa8-630296f53c66","Content-Type":"application/json"}}),b=new class{constructor(e,t){let{items:s,renderer:i}=e;var r,n;n=e=>{this.container.prepend(e)},(r="addItem")in this?Object.defineProperty(this,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):this[r]=n,this.renderer=i,this.container=document.querySelector(t)}renderItems(e){e.forEach((e=>{this.addItem(this.renderer(e))}))}}({items:[],renderer:p},".photo-grid__list");m.getUserInfo().then((e=>{g.setUserInfo({profileFormNameInput:e.name,profileFormRoleInput:e.about,avatarLink:e.avatar})}));try{Promise.all([m.getInitialCards(),m.getUserInfo()]).then((e=>{let[t,s]=e;d=s._id;const i=[];t.forEach((e=>{const t={createdAt:e.createdAt,namePlace:e.name,_id:e._id,linkPlace:e.link,owner:e.owner,likes:e.likes,user_id:d};i.push(t)})),b.renderItems(i)}))}catch(e){console.log(e)}const g=new class{constructor(e,t,s){return this._nameSelector=e,this._jobSelector=t,this._nameElement=document.querySelector(e),this._jobElement=document.querySelector(t),this._avatar=document.querySelector(s),this}getUserInfo(){return{name:this._nameElement.textContent,job:this._jobElement.textContent}}setUserInfo(e){this._nameElement.textContent=e.profileFormNameInput,this._jobElement.textContent=e.profileFormRoleInput,this._avatar.alt="Image of ".concat(e.profileFormNameInput),this._avatar.src=e.avatarLink}setUserAvatar(e){let{avatar:t}=e;this._avatar.src=t}}(".profile__name",l,".profile__photo"),v=new u(".popup_type_edit-profile",(function(e){v.renderLoading(!0);try{m.setUserInfo({name:e.profileFormNameInput,about:e.profileFormRoleInput}).then((e=>{g.setUserInfo({profileFormNameInput:e.name,profileFormRoleInput:e.about,avatarLink:e.avatar}),v.close()}))}catch(e){console.log(e)}v.renderLoading(!1)})),f=new u(".popup_type_new-card",(function(e){f.renderLoading(!0);try{m.createCard({name:e.namePlace,link:e.linkPlace}).then((e=>{b.addItem(p({namePlace:e.name,linkPlace:e.link,_id:e._id,owner:e.owner,user_id:d,likes:e.likes}))})),f.close()}catch{console.log(err)}f.renderLoading(!1)})),L=new u(".popup_type_avatar-change",(function(e){L.renderLoading(!0);const t=e.name;try{m.setAvatarLink(t).then((e=>{g.setUserAvatar(e),L.close()}))}catch(e){console.log(e)}L.renderLoading(!1)})),E=new class extends h{constructor(e){var t,s;super(e),s=(e,t)=>{this._previewPopupImage.src=e,this._previewPopupImage.alt="Picture of ".concat(t),this._previewPopupDescription.textContent=t,super.open()},(t="open")in this?Object.defineProperty(this,t,{value:s,enumerable:!0,configurable:!0,writable:!0}):this.open=s,this._previewPopupImage=this._popupElement.querySelector(".popup__preview-image"),this._previewPopupDescription=this._popupElement.querySelector(".popup__description")}}(".popup_type_preview"),k=new class extends h{setAction(e){this._handleSubmit=e,this._popupForm=this._popupElement.querySelector(".form"),this._submitButton=this._popupForm.querySelector(".form__submit-button")}setEventListeners(){this._popupElement.addEventListener("submit",(e=>{e.preventDefault(),this._handleSubmit()})),super.setEventListeners()}renderLoading(e){e?(this._submitButton.textContent="Deleting...",this._submitButton.disabled=!0):(this._submitButton.textContent="Yes",this._submitButton.disabled=!1)}}(".popup_type_confirm-delete-card"),y=new s(i,f.getPopupForm()),I=new s(i,v.getPopupForm()),C=new s(i,L.getPopupForm());y.enableValidation(),I.enableValidation(),C.enableValidation(),E.setEventListeners(),v.setEventListeners(),f.setEventListeners(),k.setEventListeners(),L.setEventListeners(),r.addEventListener("click",(()=>{v.open(),I.resetValidation(),function(e){let{name:t,job:s}=e;a.value=t,c.value=s}(g.getUserInfo())})),n.addEventListener("click",(()=>{f.open(),y.resetValidation()})),o.addEventListener("click",(()=>{L.open(),C.resetValidation()}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,