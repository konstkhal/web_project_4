!function(){"use strict";class e{constructor(e,t,s,i,r){var n,o;o=()=>this._cardTemplate.cloneNode(!0),(n="_getTemplate")in this?Object.defineProperty(this,n,{value:o,enumerable:!0,configurable:!0,writable:!0}):this[n]=o,this._cardSelector=t,this._id=e._id,this._ownerId=e.owner._id,this._userId=e.user_id,this._likesCount=e.likes.length,this._likesList=e.likes,this._isLiked=this._likesList.some((e=>e._id===this._userId)),this._cardTemplate=this._cardSelector.content.querySelector(".photo-grid__item"),this._handleTrashButtonClick=i,this._handleCardClick=s,this._handleLikeButtonClick=r,this._name=e.namePlace,this._link=e.linkPlace,this._alt="Picture of ".concat(e.namePlace)}_setEventListeners(){this._cardLikeButtonElement.addEventListener("click",(e=>this._handleLikeButtonClick(this._id))),this._cardTrashButtonElement.addEventListener("click",(()=>this._handleTrashButtonClick(this._id))),this._cardImageElement.addEventListener("click",(()=>this._handleCardClick()))}getIsLiked(){return this._likesList.some((e=>e._id===this._userId))}renderLike(e){this._likesList=e,this._likesCount=e.length,this._element.querySelector(".photo-grid__likes-counter").textContent=this._likesCount,this._cardLikeButtonElement.classList.toggle("photo-grid__like-button_active")}generateCard(){return this._element=this._getTemplate(),this._cardTitleElement=this._element.querySelector(".photo-grid__title"),this._cardImageElement=this._element.querySelector(".photo-grid__image"),this._cardLikeButtonElement=this._element.querySelector(".photo-grid__like-button"),this._cardTrashButtonElement=this._element.querySelector(".photo-grid__delete-button"),this._cardLikesCounterElement=this._element.querySelector(".photo-grid__likes-counter"),this._cardImageElement.src=this._link,this._cardImageElement.alt=this._name,this._cardTitleElement.textContent=this._name,this._setEventListeners(),this._ownerId!==this._userId&&this._element.querySelector(".photo-grid__delete-button").remove(),this._isLiked&&this.renderLike(this._likesList),this._cardLikesCounterElement.textContent=this._likesCount,this._element}removeCard(){this._element.remove(),this._element=null}}function t(e,t,s){return t in e?Object.defineProperty(e,t,{value:s,enumerable:!0,configurable:!0,writable:!0}):e[t]=s,e}var s=class{constructor(e,s){t(this,"_setEventListeners",(()=>{this._toggleButton(),this._inputList.forEach((e=>{e.addEventListener("input",(()=>{this._сheckInputValidity(e),this._toggleButton()}))}))})),t(this,"_showInputError",(e=>{const t=this._element.querySelector("#".concat(e.id,"-error"));t.textContent=e.validationMessage,t.classList.add(this._config.errorClass),e.classList.add(this._config.inputErrorClass)})),t(this,"_hideInputError",(e=>{const t=this._element.querySelector("#".concat(e.id,"-error"));t.textContent="",t.classList.remove(this._config.errorClass),e.classList.remove(this._config.inputErrorClass)})),t(this,"_сheckInputValidity",(e=>{e.validity.valid?this._hideInputError(e):this._showInputError(e)})),this._config={...e},this._element=s,this._buttonElement=this._element.querySelector(this._config.submitButtonSelector),this._inputList=Array.from(this._element.querySelectorAll(this._config.inputSelector))}_toggleButton(){this._hasValidInputs()?this._buttonElement.disabled=!1:this._buttonElement.disabled=!0}_hasValidInputs(){return this._inputList.every((e=>!0===e.validity.valid))}enableValidation(){this._element.addEventListener("submit",(e=>{e.preventDefault()})),this._setEventListeners()}resetValidation(){this._element.reset(),this._inputList.forEach((e=>{this._hideInputError(e)})),this._toggleButton()}};class i{constructor(e,t){let{items:s,renderer:i}=e;var r,n;n=e=>{this.container.prepend(e)},(r="addItem")in this?Object.defineProperty(this,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):this[r]=n,this.initialItems=s,this.renderer=i,this.container=document.querySelector(t),this.renderItems()}renderItems(){this.initialItems.forEach((e=>{this.addItem(this.renderer(e))}))}}const r={inputSelector:".form__input",submitButtonSelector:".form__submit-button",inactiveButtonClass:"button_blocked",inputErrorClass:"form__input-error",errorClass:"form__input-error_visible"},n=document.querySelector(".profile__link-change_place_profile"),o=document.querySelector(".profile__link-add"),a=document.querySelector(".profile__link-change_place_image"),l=document.querySelector(".form__input_type_name"),c=".profile__role",h=(document.querySelector(c),document.querySelector(".form__input_type_role"));document.querySelector(".form__input_type_image-title"),document.querySelector(".form__input_type_image-link");class u{constructor(e){var t,s;s=e=>{"Escape"===e.key&&(e.preventDefault(),this.close())},(t="_handleEscClose")in this?Object.defineProperty(this,t,{value:s,enumerable:!0,configurable:!0,writable:!0}):this[t]=s,this._popupElement=document.querySelector(e)}setEventListeners(){this._popupElement.addEventListener("mousedown",(e=>{(e.target.classList.contains("popup")||e.target.classList.contains("popup__close-button"))&&this.close()}))}open(){this._popupElement.classList.add("popup_opened"),document.addEventListener("keydown",this._handleEscClose)}close(){this._popupElement.classList.remove("popup_opened"),document.removeEventListener("keydown",this._handleEscClose)}}class _ extends u{constructor(e,t){super(e),this._popupForm=this._popupElement.querySelector(".form"),this._submitButton=this._popupForm.querySelector(".form__submit-button"),this.handleFormSubmit=t,this._inputsArray=[...this._popupForm.querySelectorAll(".form__input")]}renderLoading(e){e?(this._submitButton.textContent="Saving...",this._submitButton.disabled=!0):(this._submitButton.textContent="Save",this._submitButton.disabled=!1)}getPopupForm(){return this._popupForm}_getInputValues(){const e={};return this._inputsArray.forEach((t=>{e[t.name]=t.value})),e}setEventListeners(){super.setEventListeners(),this._popupForm.addEventListener("submit",(()=>{this.handleFormSubmit(this._getInputValues())}))}close(){super.close(),this._popupForm.reset()}}const d=document.querySelector("#card-template"),p=t=>{const s=new e(t,d,(()=>{y.open(t.linkPlace,t.namePlace)}),(e=>{I.open(),I.setAction((()=>{m.deleteCard(e).then((e=>{s.removeCard(),I.close()}))}))}),(e=>{s.getIsLiked()?m.disLikeCard(e).then((e=>{console.log("res",e),s.renderLike(e.likes)})):m.likeCard(e).then((e=>{console.log("res",e),s.renderLike(e.likes)}))}));return s.generateCard()},m=new class{constructor(e){let{baseUrl:t,headers:s}=e;var i,r;r=async(e,t)=>{try{const s=await fetch(e,t);return await(s.ok?s.json():Promise.reject(s.statusText))}catch(e){return console.log(e)}},(i="_customFetch")in this?Object.defineProperty(this,i,{value:r,enumerable:!0,configurable:!0,writable:!0}):this[i]=r,this._baseUrl=t,this._headers=s}getInitialCards(){return this._customFetch("".concat(this._baseUrl,"/cards"),{headers:this._headers})}getUserInfo(){return this._customFetch("".concat(this._baseUrl,"/users/me"),{headers:this._headers})}setAvatarLink(e){return console.log(JSON.stringify(e)),this._customFetch("".concat(this._baseUrl,"/users/me/avatar"),{headers:this._headers,method:"PATCH",body:JSON.stringify({avatar:e})})}setUserInfo(e){return this._customFetch("".concat(this._baseUrl,"/users/me"),{headers:this._headers,method:"PATCH",body:JSON.stringify(e)})}createCard(e){return this._customFetch("".concat(this._baseUrl,"/cards"),{headers:this._headers,method:"POST",body:JSON.stringify(e)})}deleteCard(e){return this._customFetch("".concat(this._baseUrl,"/cards/").concat(e),{headers:this._headers,method:"DELETE"})}likeCard(e){return this._customFetch("".concat(this._baseUrl,"/cards/likes/").concat(e),{headers:this._headers,method:"PUT"})}disLikeCard(e){return this._customFetch("".concat(this._baseUrl,"/cards/likes/").concat(e),{headers:this._headers,method:"DELETE"})}}({baseUrl:"https://around.nomoreparties.co/v1/group-12",headers:{authorization:"cfbd7707-a110-44ae-8aa8-630296f53c66","Content-Type":"application/json"}}),g=new i({items:[],renderer:p},".photo-grid__list");let v;m.getUserInfo().then((e=>{f.setUserInfo({profileFormNameInput:e.name,profileFormRoleInput:e.about,avatarLink:e.avatar})}));const b=[];Promise.all([m.getInitialCards(),m.getUserInfo()]).then((e=>{let[t,s]=e;v=s._id,t.forEach((e=>{const t={createdAt:e.createdAt,namePlace:e.name,_id:e._id,linkPlace:e.link,owner:e.owner,likes:e.likes,user_id:v};b.push(t)})),new i({items:b,renderer:p},".photo-grid__list")}));const f=new class{constructor(e,t,s){return this._nameSelector=e,this._jobSelector=t,this._nameElement=document.querySelector(e),this._jobElement=document.querySelector(t),this._avatar=document.querySelector(s),this}getUserInfo(){return{name:this._nameElement.textContent,job:this._jobElement.textContent}}setUserInfo(e){this._nameElement.textContent=e.profileFormNameInput,this._jobElement.textContent=e.profileFormRoleInput,this._avatar.alt="Image of ".concat(e.profileFormNameInput),this._avatar.src=e.avatarLink}setUserAvatar(e){let{avatar:t}=e;this._avatar.src=t}}(".profile__name",c,".profile__photo"),E=new _(".popup_type_edit-profile",(function(e){E.renderLoading(!0),console.log(e),m.setUserInfo({name:e.profileFormNameInput,about:e.profileFormRoleInput}).then((e=>{console.log(e),f.setUserInfo({profileFormNameInput:e.name,profileFormRoleInput:e.about})})).catch((e=>{console.log(e)})).finally((()=>{E.renderLoading(!1),E.close()}))})),k=new _(".popup_type_new-card",(function(e){k.renderLoading(!0),m.createCard({name:e.namePlace,link:e.linkPlace}).then((e=>{g.addItem(p({namePlace:e.name,linkPlace:e.link,_id:e._id,owner:e.owner,user_id:v,likes:e.likes}))})).catch((e=>{console.log(e)})).finally((()=>{k.renderLoading(!1),k.close()}))})),L=new _(".popup_type_avatar_change",(function(e){L.renderLoading(!0);var t=e.name;m.setAvatarLink(t).then((e=>{console.log(e),f.setUserAvatar(e),L.close()})).catch((e=>{console.log(e)})).finally((()=>{L.renderLoading(!1)}))})),y=new class extends u{constructor(e){var t,s;super(e),s=(e,t)=>{this._previewPopupImage.src=e,this._previewPopupImage.alt="Picture of ".concat(t),this._previewPopupDescription.textContent=t,super.open()},(t="open")in this?Object.defineProperty(this,t,{value:s,enumerable:!0,configurable:!0,writable:!0}):this.open=s,this._previewPopupImage=this._popupElement.querySelector(".popup__preview-image"),this._previewPopupDescription=this._popupElement.querySelector(".popup__description")}}(".popup_type_preview"),I=new class extends u{setAction(e){this._submitHandler=e}setEventListeners(){this._popupElement.addEventListener("submit",(e=>{e.preventDefault(),this._submitHandler()})),super.setEventListeners()}}(".popup_type_confirm-delete-card"),C=new s(r,k.getPopupForm()),S=new s(r,E.getPopupForm()),w=new s(r,L.getPopupForm());C.enableValidation(),S.enableValidation(),w.enableValidation(),y.setEventListeners(),E.setEventListeners(),k.setEventListeners(),I.setEventListeners(),L.setEventListeners(),n.addEventListener("click",(()=>{const{name:e,job:t}=f.getUserInfo();E.open(),S.resetValidation(),l.value=e,h.value=t})),o.addEventListener("click",(()=>{k.open(),C.resetValidation()})),a.addEventListener("click",(()=>{L.open(),w.resetValidation()}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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akssWUFBY2QsRUFFNUMwRixNQUFNTCxTLEVBaEJtQixlLHNCQUFBLEssdURBQUEsSyxPQUV6QjNHLEtBQUtvTSxtQkFBcUJwTSxLQUFLdUcsY0FBY3RGLGNBQzNDLHlCQUVGakIsS0FBS3FNLHlCQUEyQnJNLEtBQUt1RyxjQUFjdEYsY0FDakQseUJIK09nQyx1QkFDaEM4RyxFQUFlLElJbFFOLGNBQThCNUIsRUFDM0M2QixVQUFVc0UsR0FDUnRNLEtBQUt1TSxlQUFpQkQsRUFFeEI5RixvQkFDRXhHLEtBQUt1RyxjQUFjM0UsaUJBQWlCLFVBQVcrQyxJQUM3Q0EsRUFBTUMsaUJBQ041RSxLQUFLdU0sb0JBSVB2RixNQUFNUixzQkp1UCtCLG1DQXFCbkNnRyxFQUFjLElBQUlDLEVBQ3RCOUcsRUFDQXNHLEVBQWEzRSxnQkFFVG9GLEVBQVcsSUFBSUQsRUFDbkI5RyxFQUNBa0csRUFBaUJ2RSxnQkFHYnFGLEVBQWlCLElBQUlGLEVBQ3pCOUcsRUFDQXVHLEVBQWdCNUUsZ0JBR2xCa0YsRUFBWTlILG1CQUNaZ0ksRUFBU2hJLG1CQUNUaUksRUFBZWpJLG1CQUtmb0QsRUFBV3RCLG9CQUVYcUYsRUFBaUJyRixvQkFFakJ5RixFQUFhekYsb0JBRWJ1QixFQUFhdkIsb0JBQ2IwRixFQUFnQjFGLG9CQUtoQlgsRUFBMkJqRSxpQkFBaUIsU0FBUyxLQUNuRCxNQUFNLEtBQUU2RixFQUFGLElBQVFpRSxHQUFRckIsRUFBU2IsY0FFL0JxQyxFQUFpQmxGLE9BQ2pCK0YsRUFBUzdILGtCQUNUbUIsRUFBVTBCLE1BQVFELEVBQ2xCdkIsRUFBVXdCLE1BQVFnRSxLQUdwQjVGLEVBQXFCbEUsaUJBQWlCLFNBQVMsS0FDN0NxSyxFQUFhdEYsT0FDYjZGLEVBQVkzSCxxQkFHZGtCLEVBQXdCbkUsaUJBQWlCLFNBQVMsS0FDaERzSyxFQUFnQnZGLE9BQ2hCZ0csRUFBZTlILHFCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd2ViX3Byb2plY3RfNC8uL3NyYy9jb21wb25lbnRzL0NhcmQuanMiLCJ3ZWJwYWNrOi8vd2ViX3Byb2plY3RfNC8uL3NyYy9jb21wb25lbnRzL0Zvcm1WYWxpZGF0b3IuanMiLCJ3ZWJwYWNrOi8vd2ViX3Byb2plY3RfNC8uL3NyYy9jb21wb25lbnRzL1NlY3Rpb24uanMiLCJ3ZWJwYWNrOi8vd2ViX3Byb2plY3RfNC8uL3NyYy91dGlscy9jb25zdGFudHMuanMiLCJ3ZWJwYWNrOi8vd2ViX3Byb2plY3RfNC8uL3NyYy9jb21wb25lbnRzL1BvcHVwLmpzIiwid2VicGFjazovL3dlYl9wcm9qZWN0XzQvLi9zcmMvY29tcG9uZW50cy9Qb3B1cFdpdGhGb3JtLmpzIiwid2VicGFjazovL3dlYl9wcm9qZWN0XzQvLi9zcmMvcGFnZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vd2ViX3Byb2plY3RfNC8uL3NyYy9jb21wb25lbnRzL0FwaS5qcyIsIndlYnBhY2s6Ly93ZWJfcHJvamVjdF80Ly4vc3JjL2NvbXBvbmVudHMvVXNlckluZm8uanMiLCJ3ZWJwYWNrOi8vd2ViX3Byb2plY3RfNC8uL3NyYy9jb21wb25lbnRzL1BvcHVwV2l0aEltYWdlLmpzIiwid2VicGFjazovL3dlYl9wcm9qZWN0XzQvLi9zcmMvY29tcG9uZW50cy9Qb3B1cFdpdGhTdWJtaXQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqIFRyYW5zZm9ybWluZyB0aGUgQ2FyZCBDbGFzc1xyXG4gKiAgQ29ubmVjdCB0aGUgQ2FyZCBjbGFzcyB0byB0aGUgcG9wdXAuXHJcbiAqIE1ha2UgQ2FyZCB0YWtlIHRoZSBoYW5kbGVDYXJkQ2xpY2soKSBmdW5jdGlvbiBpbnRvIHRoZSBjb25zdHJ1Y3Rvci5cclxuICogV2hlbiB0aGUgdXNlciBjbGlja3Mgb24gdGhlIGNhcmQsXHJcbiAqIHRoaXMgZnVuY3Rpb24gd2lsbCBvcGVuIHRoZSBwb3B1cCB3aXRoIGFuIGltYWdlXHJcbiAqL1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ2FyZCB7XHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICBkYXRhLFxyXG4gICAgY2FyZFNlbGVjdG9yLFxyXG4gICAgaGFuZGxlQ2FyZENsaWNrLFxyXG4gICAgaGFuZGxlVHJhc2hCdXR0b25DbGljayxcclxuICAgIGhhbmRsZUxpa2VCdXR0b25DbGlja1xyXG4gICkge1xyXG4gICAgdGhpcy5fY2FyZFNlbGVjdG9yID0gY2FyZFNlbGVjdG9yOyAvL3RlbXBsYXRlIHNlbGVjdG9yXHJcbiAgICB0aGlzLl9pZCA9IGRhdGEuX2lkO1xyXG4gICAgLy9jb25zb2xlLmxvZyhkYXRhKTtcclxuICAgIHRoaXMuX293bmVySWQgPSBkYXRhLm93bmVyLl9pZDtcclxuICAgIHRoaXMuX3VzZXJJZCA9IGRhdGEudXNlcl9pZDtcclxuICAgIHRoaXMuX2xpa2VzQ291bnQgPSBkYXRhLmxpa2VzLmxlbmd0aDtcclxuICAgIHRoaXMuX2xpa2VzTGlzdCA9IGRhdGEubGlrZXM7XHJcbiAgICAvL2NvbnNvbGUubG9nKHRoaXMuX2xpa2VzTGlzdCk7XHJcblxyXG4gICAgdGhpcy5faXNMaWtlZCA9IHRoaXMuX2xpa2VzTGlzdC5zb21lKFxyXG4gICAgICAocGVyc29uKSA9PiBwZXJzb24uX2lkID09PSB0aGlzLl91c2VySWRcclxuICAgICk7XHJcblxyXG4gICAgLy9jb25zb2xlLmxvZyh0aGlzLl9saWtlc0NvdW50KTtcclxuICAgIC8vY29uc29sZS5sb2coZGF0YSk7XHJcbiAgICB0aGlzLl9jYXJkVGVtcGxhdGUgPVxyXG4gICAgICB0aGlzLl9jYXJkU2VsZWN0b3IuY29udGVudC5xdWVyeVNlbGVjdG9yKFwiLnBob3RvLWdyaWRfX2l0ZW1cIik7IC8vIHNlbGVjdGluZyBjYXJkIHRlbXBsYXRlIGVsZW1lbnRcclxuXHJcbiAgICB0aGlzLl9oYW5kbGVUcmFzaEJ1dHRvbkNsaWNrID0gaGFuZGxlVHJhc2hCdXR0b25DbGljaztcclxuICAgIHRoaXMuX2hhbmRsZUNhcmRDbGljayA9IGhhbmRsZUNhcmRDbGljaztcclxuICAgIHRoaXMuX2hhbmRsZUxpa2VCdXR0b25DbGljayA9IGhhbmRsZUxpa2VCdXR0b25DbGljaztcclxuXHJcbiAgICB0aGlzLl9uYW1lID0gZGF0YS5uYW1lUGxhY2U7XHJcbiAgICB0aGlzLl9saW5rID0gZGF0YS5saW5rUGxhY2U7XHJcbiAgICB0aGlzLl9hbHQgPSBgUGljdHVyZSBvZiAke2RhdGEubmFtZVBsYWNlfWA7XHJcblxyXG4gICAgLy8gc2VsZWN0IGNhcmQgYW5kIGNhcmQgZWxlbWVudCBwYXJ0c1xyXG4gIH1cclxuICBfZ2V0VGVtcGxhdGUgPSAoKSA9PiB7XHJcbiAgICByZXR1cm4gdGhpcy5fY2FyZFRlbXBsYXRlLmNsb25lTm9kZSh0cnVlKTtcclxuICB9O1xyXG5cclxuICBfc2V0RXZlbnRMaXN0ZW5lcnMoKSB7XHJcbiAgICAvL2hhbmRsZXJzIHNldHRlZCBoZXJlXHJcblxyXG4gICAgdGhpcy5fY2FyZExpa2VCdXR0b25FbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoZSkgPT5cclxuICAgICAgdGhpcy5faGFuZGxlTGlrZUJ1dHRvbkNsaWNrKHRoaXMuX2lkKVxyXG4gICAgKTtcclxuICAgIHRoaXMuX2NhcmRUcmFzaEJ1dHRvbkVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+XHJcbiAgICAgIHRoaXMuX2hhbmRsZVRyYXNoQnV0dG9uQ2xpY2sodGhpcy5faWQpXHJcbiAgICApO1xyXG5cclxuICAgIHRoaXMuX2NhcmRJbWFnZUVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+XHJcbiAgICAgIHRoaXMuX2hhbmRsZUNhcmRDbGljaygpXHJcbiAgICApO1xyXG4gIH1cclxuXHJcbiAgLyogIF9oYW5kbGVMaWtlQnV0dG9uQ2xpY2sgPSAoZSkgPT4ge1xyXG4gICAgLy9jb25zb2xlLmxvZyhldmVudCk7XHJcbiAgICBlLnRhcmdldC5jbGFzc0xpc3QudG9nZ2xlKFwicGhvdG8tZ3JpZF9fbGlrZS1idXR0b25fYWN0aXZlXCIpO1xyXG4gIH07ICovXHJcblxyXG4gIC8qICAgX2hhbmRsZVRyYXNoQnV0dG9uQ2xpY2sgPSAoKSA9PiB7XHJcbiAgICB0aGlzLl9lbGVtZW50LnJlbW92ZSgpO1xyXG4gICAgdGhpcy5fZWxlbWVudCA9IG51bGw7XHJcbiAgfTsgKi9cclxuXHJcbiAgLyogIF9oYW5kbGVDYXJkSW1hZ2VDbGljayA9ICgpID0+IHtcclxuICAgIHRoaXMuX2hhbmRsZUNhcmRDbGljayh7IGxpbms6IHRoaXMuX2xpbmssIG5hbWU6IHRoaXMuX25hbWUgfSk7XHJcbiAgfTsgKi9cclxuXHJcbiAgZ2V0SXNMaWtlZCgpIHtcclxuICAgIHJldHVybiB0aGlzLl9saWtlc0xpc3Quc29tZSgocGVyc29uKSA9PiBwZXJzb24uX2lkID09PSB0aGlzLl91c2VySWQpO1xyXG4gIH1cclxuXHJcbiAgcmVuZGVyTGlrZShuZXdMaWtlcykge1xyXG4gICAgLy9jb25zb2xlLmxvZyhuZXdMaWtlcyk7XHJcbiAgICB0aGlzLl9saWtlc0xpc3QgPSBuZXdMaWtlcztcclxuICAgIHRoaXMuX2xpa2VzQ291bnQgPSBuZXdMaWtlcy5sZW5ndGg7XHJcbiAgICB0aGlzLl9lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIucGhvdG8tZ3JpZF9fbGlrZXMtY291bnRlclwiKS50ZXh0Q29udGVudCA9XHJcbiAgICAgIHRoaXMuX2xpa2VzQ291bnQ7XHJcbiAgICB0aGlzLl9jYXJkTGlrZUJ1dHRvbkVsZW1lbnQuY2xhc3NMaXN0LnRvZ2dsZShcclxuICAgICAgXCJwaG90by1ncmlkX19saWtlLWJ1dHRvbl9hY3RpdmVcIlxyXG4gICAgKTtcclxuXHJcbiAgICAvLyB0aGlzLl9saWtlc0NvdW50ID0gbmV3TGlrZXMubGVuZ3RoO1xyXG4gIH1cclxuXHJcbiAgZ2VuZXJhdGVDYXJkKCkge1xyXG4gICAgdGhpcy5fZWxlbWVudCA9IHRoaXMuX2dldFRlbXBsYXRlKCk7XHJcbiAgICB0aGlzLl9jYXJkVGl0bGVFbGVtZW50ID0gdGhpcy5fZWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLnBob3RvLWdyaWRfX3RpdGxlXCIpO1xyXG5cclxuICAgIHRoaXMuX2NhcmRJbWFnZUVsZW1lbnQgPSB0aGlzLl9lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIucGhvdG8tZ3JpZF9faW1hZ2VcIik7XHJcbiAgICB0aGlzLl9jYXJkTGlrZUJ1dHRvbkVsZW1lbnQgPSB0aGlzLl9lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXHJcbiAgICAgIFwiLnBob3RvLWdyaWRfX2xpa2UtYnV0dG9uXCJcclxuICAgICk7XHJcbiAgICB0aGlzLl9jYXJkVHJhc2hCdXR0b25FbGVtZW50ID0gdGhpcy5fZWxlbWVudC5xdWVyeVNlbGVjdG9yKFxyXG4gICAgICBcIi5waG90by1ncmlkX19kZWxldGUtYnV0dG9uXCJcclxuICAgICk7XHJcblxyXG4gICAgdGhpcy5fY2FyZExpa2VzQ291bnRlckVsZW1lbnQgPSB0aGlzLl9lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXHJcbiAgICAgIFwiLnBob3RvLWdyaWRfX2xpa2VzLWNvdW50ZXJcIlxyXG4gICAgKTtcclxuXHJcbiAgICB0aGlzLl9jYXJkSW1hZ2VFbGVtZW50LnNyYyA9IHRoaXMuX2xpbms7XHJcbiAgICB0aGlzLl9jYXJkSW1hZ2VFbGVtZW50LmFsdCA9IHRoaXMuX25hbWU7XHJcbiAgICB0aGlzLl9jYXJkVGl0bGVFbGVtZW50LnRleHRDb250ZW50ID0gdGhpcy5fbmFtZTtcclxuICAgIHRoaXMuX3NldEV2ZW50TGlzdGVuZXJzKCk7XHJcblxyXG4gICAgaWYgKHRoaXMuX293bmVySWQgIT09IHRoaXMuX3VzZXJJZCkge1xyXG4gICAgICB0aGlzLl9lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIucGhvdG8tZ3JpZF9fZGVsZXRlLWJ1dHRvblwiKS5yZW1vdmUoKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAodGhpcy5faXNMaWtlZCkge1xyXG4gICAgICB0aGlzLnJlbmRlckxpa2UodGhpcy5fbGlrZXNMaXN0KTtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLl9jYXJkTGlrZXNDb3VudGVyRWxlbWVudC50ZXh0Q29udGVudCA9IHRoaXMuX2xpa2VzQ291bnQ7XHJcblxyXG4gICAgcmV0dXJuIHRoaXMuX2VsZW1lbnQ7XHJcbiAgfVxyXG5cclxuICByZW1vdmVDYXJkKCkge1xyXG4gICAgdGhpcy5fZWxlbWVudC5yZW1vdmUoKTtcclxuICAgIHRoaXMuX2VsZW1lbnQgPSBudWxsO1xyXG4gIH1cclxufVxyXG4iLCJjbGFzcyBGb3JtVmFsaWRhdG9yIHtcbiAgY29uc3RydWN0b3IoY29uZmlnLCBmb3JtRWwpIHtcbiAgICB0aGlzLl9jb25maWcgPSB7IC4uLmNvbmZpZyB9O1xuXG4gICAgdGhpcy5fZWxlbWVudCA9IGZvcm1FbDsgLy9teSBmb3JtIGlzIGhlcmVcblxuICAgIHRoaXMuX2J1dHRvbkVsZW1lbnQgPSB0aGlzLl9lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXG4gICAgICB0aGlzLl9jb25maWcuc3VibWl0QnV0dG9uU2VsZWN0b3JcbiAgICApO1xuICAgIHRoaXMuX2lucHV0TGlzdCA9IEFycmF5LmZyb20oXG4gICAgICB0aGlzLl9lbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwodGhpcy5fY29uZmlnLmlucHV0U2VsZWN0b3IpXG4gICAgKTtcbiAgfVxuXG4gIF90b2dnbGVCdXR0b24oKSB7XG4gICAgaWYgKHRoaXMuX2hhc1ZhbGlkSW5wdXRzKCkpIHtcbiAgICAgIHRoaXMuX2J1dHRvbkVsZW1lbnQuZGlzYWJsZWQgPSBmYWxzZTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fYnV0dG9uRWxlbWVudC5kaXNhYmxlZCA9IHRydWU7XG4gICAgfVxuICB9XG5cbiAgX2hhc1ZhbGlkSW5wdXRzKCkge1xuICAgIHJldHVybiB0aGlzLl9pbnB1dExpc3QuZXZlcnkoKGlucHV0KSA9PiBpbnB1dC52YWxpZGl0eS52YWxpZCA9PT0gdHJ1ZSk7XG4gIH1cblxuICBfc2V0RXZlbnRMaXN0ZW5lcnMgPSAoKSA9PiB7XG4gICAgdGhpcy5fdG9nZ2xlQnV0dG9uKCk7XG5cbiAgICB0aGlzLl9pbnB1dExpc3QuZm9yRWFjaCgoaW5wdXQpID0+IHtcbiAgICAgIGlucHV0LmFkZEV2ZW50TGlzdGVuZXIoXCJpbnB1dFwiLCAoKSA9PiB7XG4gICAgICAgIHRoaXMuX9GBaGVja0lucHV0VmFsaWRpdHkoaW5wdXQpO1xuICAgICAgICB0aGlzLl90b2dnbGVCdXR0b24oKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9O1xuXG4gIF9zaG93SW5wdXRFcnJvciA9IChpbnB1dCkgPT4ge1xuICAgIGNvbnN0IGVycm9yU3BhbiA9IHRoaXMuX2VsZW1lbnQucXVlcnlTZWxlY3RvcihgIyR7aW5wdXQuaWR9LWVycm9yYCk7XG5cbiAgICBlcnJvclNwYW4udGV4dENvbnRlbnQgPSBpbnB1dC52YWxpZGF0aW9uTWVzc2FnZTtcbiAgICBlcnJvclNwYW4uY2xhc3NMaXN0LmFkZCh0aGlzLl9jb25maWcuZXJyb3JDbGFzcyk7XG4gICAgaW5wdXQuY2xhc3NMaXN0LmFkZCh0aGlzLl9jb25maWcuaW5wdXRFcnJvckNsYXNzKTtcbiAgfTtcblxuICBfaGlkZUlucHV0RXJyb3IgPSAoaW5wdXQpID0+IHtcbiAgICBjb25zdCBlcnJvclNwYW4gPSB0aGlzLl9lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoYCMke2lucHV0LmlkfS1lcnJvcmApO1xuXG4gICAgZXJyb3JTcGFuLnRleHRDb250ZW50ID0gXCJcIjtcbiAgICBlcnJvclNwYW4uY2xhc3NMaXN0LnJlbW92ZSh0aGlzLl9jb25maWcuZXJyb3JDbGFzcyk7XG4gICAgaW5wdXQuY2xhc3NMaXN0LnJlbW92ZSh0aGlzLl9jb25maWcuaW5wdXRFcnJvckNsYXNzKTtcbiAgfTtcblxuICBf0YFoZWNrSW5wdXRWYWxpZGl0eSA9IChpbnB1dCkgPT4ge1xuICAgIGlmIChpbnB1dC52YWxpZGl0eS52YWxpZCkge1xuICAgICAgdGhpcy5faGlkZUlucHV0RXJyb3IoaW5wdXQpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9zaG93SW5wdXRFcnJvcihpbnB1dCk7XG4gICAgfVxuICB9O1xuXG4gIGVuYWJsZVZhbGlkYXRpb24oKSB7XG4gICAgLy9QdWJsaWMgaW5pdCBlbnRyeSBwb2ludCBvZiB0aGUgY2xhc3NcbiAgICB0aGlzLl9lbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJzdWJtaXRcIiwgKGV2ZW50KSA9PiB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH0pO1xuXG4gICAgdGhpcy5fc2V0RXZlbnRMaXN0ZW5lcnMoKTtcbiAgfVxuXG4gIHJlc2V0VmFsaWRhdGlvbigpIHtcbiAgICB0aGlzLl9lbGVtZW50LnJlc2V0KCk7XG4gICAgdGhpcy5faW5wdXRMaXN0LmZvckVhY2goKGlucHV0KSA9PiB7XG4gICAgICB0aGlzLl9oaWRlSW5wdXRFcnJvcihpbnB1dCk7XG4gICAgfSk7XG4gICAgLy8gdGhpcy5fZWxlbWVudC5yZXNldCgpO1xuICAgIHRoaXMuX3RvZ2dsZUJ1dHRvbigpO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEZvcm1WYWxpZGF0b3I7XG4iLCIvKipcclxuICogQ3JlYXRlIHRoZSBTZWN0aW9uIGNsYXNzIGZvciByZW5kZXJpbmcgYSBsaXN0IG9mIGVsZW1lbnRzIG9uIGEgcGFnZVxyXG4gKiBhY2NvcmRpbmcgdG8gdGhlIGZvbGxvd2luZyByZXF1aXJlbWVudHM6XHJcbiAqIEl0IGhhcyBhbiBvYmplY3Qgd2l0aCB0d28gcHJvcGVydGllcyAoaXRlbXMgYW5kIHJlbmRlcmVyKVxyXG4gKiBhcyB0aGUgZmlyc3QgcGFyYW1ldGVyIG9mIHRoZSBjb25zdHJ1Y3Rvci5cclxuICogVGhlIGl0ZW1zIHByb3BlcnR5IHNlcnZlcyBhcyBhbiBhcnJheSBvZiBkYXRhLFxyXG4gKiB3aGljaCB5b3UgbmVlZCB0byBhZGQgb24gYSBwYWdlIHdoZW4gaW5pdGlhbGl6aW5nIHRoZSBjbGFzcy5cclxuICogVGhlIHJlbmRlcmVyIHByb3BlcnR5IGlzIGFcclxuICogZnVuY3Rpb24gcmVzcG9uc2libGUgZm9yIGNyZWF0aW5nIGFuZCByZW5kZXJpbmcgZGF0YSBvbiBhIHBhZ2UuXHJcbiAqIFRoZSBzZWNvbmQgcGFyYW1ldGVyIHNob3VsZCBiZSBhIENTUyBjbGFzcyBzZWxlY3RvclxyXG4gKiB3aGVyZSB5b3UnbGwgYWRkIHRoZSBjYXJkIGVsZW1lbnRzLlxyXG4gKiBJdCBzdG9yZXMgYSBwdWJsaWMgbWV0aG9kIHRoYXQgcmVuZGVycyBhbGwgZWxlbWVudHMgb24gdGhlIHBhZ2UuXHJcbiAqIFRoZSByZW5kZXJlcigpIGZ1bmN0aW9uIHdpbGwgcmVuZGVyIGVhY2ggZWxlbWVudCBvbiBhIHBhZ2UuXHJcbiAqIEl0IHN0b3JlcyBhIHB1YmxpYyBtZXRob2QgbmFtZWQgYWRkSXRlbSgpXHJcbiAqIHRoYXQgdGFrZXMgYSBET00gZWxlbWVudCBhbmQgYWRkcyBpdCB0byB0aGUgY29udGFpbmVyLlxyXG4gKiBUaGUgU2VjdGlvbiBjbGFzcyBkb2Vzbid0IGhhdmUgbWFya3VwLlxyXG4gKiBJdCByZWNlaXZlcyBtYXJrdXAgdGhyb3VnaCB0aGUgY2FsbGJhY2sgZnVuY3Rpb24gYW5kIGluc2VydHMgaXQgaW4gdGhlIGNvbnRhaW5lclxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU2VjdGlvbiB7XHJcbiAgY29uc3RydWN0b3IoeyBpdGVtcywgcmVuZGVyZXIgfSwgY29udGFpbmVyU2VsZWN0b3IpIHtcclxuICAgIHRoaXMuaW5pdGlhbEl0ZW1zID0gaXRlbXM7XHJcbiAgICB0aGlzLnJlbmRlcmVyID0gcmVuZGVyZXI7XHJcbiAgICB0aGlzLmNvbnRhaW5lciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoY29udGFpbmVyU2VsZWN0b3IpO1xyXG4gICAgdGhpcy5yZW5kZXJJdGVtcygpO1xyXG4gIH1cclxuXHJcbiAgcmVuZGVySXRlbXMoKSB7XHJcbiAgICB0aGlzLmluaXRpYWxJdGVtcy5mb3JFYWNoKChpdGVtKSA9PiB7XHJcbiAgICAgIHRoaXMuYWRkSXRlbSh0aGlzLnJlbmRlcmVyKGl0ZW0pKTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgYWRkSXRlbSA9IChlbGVtZW50KSA9PiB7XHJcbiAgICAvLyBjb25zb2xlLmxvZyhlbGVtZW50KTtcclxuICAgIHRoaXMuY29udGFpbmVyLnByZXBlbmQoZWxlbWVudCk7XHJcbiAgfTtcclxufVxyXG4iLCJjb25zdCBkZWZhdWx0Rm9ybUNvbmZpZyA9IHtcclxuICBpbnB1dFNlbGVjdG9yOiBcIi5mb3JtX19pbnB1dFwiLFxyXG4gIHN1Ym1pdEJ1dHRvblNlbGVjdG9yOiBcIi5mb3JtX19zdWJtaXQtYnV0dG9uXCIsXHJcbiAgaW5hY3RpdmVCdXR0b25DbGFzczogXCJidXR0b25fYmxvY2tlZFwiLFxyXG4gIGlucHV0RXJyb3JDbGFzczogXCJmb3JtX19pbnB1dC1lcnJvclwiLFxyXG4gIGVycm9yQ2xhc3M6IFwiZm9ybV9faW5wdXQtZXJyb3JfdmlzaWJsZVwiLFxyXG4gIC8vIGZvcm1TZWxlY3RvcjogXCIuZm9ybVwiLFxyXG59O1xyXG5cclxuY29uc3QgcG9wdXBPcGVuRWRpdFByb2ZpbGVCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFxyXG4gIFwiLnByb2ZpbGVfX2xpbmstY2hhbmdlX3BsYWNlX3Byb2ZpbGVcIlxyXG4pO1xyXG5jb25zdCBuZXdDYXJkQnV0dG9uRWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIucHJvZmlsZV9fbGluay1hZGRcIik7XHJcblxyXG5jb25zdCBwb3B1cE9wZW5FZGl0QXZhdGFyTGluayA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXHJcbiAgXCIucHJvZmlsZV9fbGluay1jaGFuZ2VfcGxhY2VfaW1hZ2VcIlxyXG4pO1xyXG5cclxuLyogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cclxuLyogICAgICAgICAgICAgICAgICAgICBJTklUSUFMIHZhcmlhYmxlcyBmb3IgcHJvZmlsZSBlZGl0ICAgICAgICAgICAgICAgICAgICAgKi9cclxuLyogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cclxuY29uc3QgbmFtZUVsZW1lbnRTZWxlY3RvciA9IFwiLnByb2ZpbGVfX25hbWVcIjtcclxuLy9jb25zdCBuYW1lRWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IobmFtZUVsZW1lbnRTZWxlY3Rvcik7XHJcbmNvbnN0IG5hbWVJbnB1dCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuZm9ybV9faW5wdXRfdHlwZV9uYW1lXCIpOyAvL3BvcHVwIGZvcm1cclxuY29uc3Qgcm9sZUVsZW1lbnRTZWxlY3RvciA9IFwiLnByb2ZpbGVfX3JvbGVcIjtcclxuY29uc3Qgcm9sZUVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHJvbGVFbGVtZW50U2VsZWN0b3IpO1xyXG5jb25zdCByb2xlSW5wdXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmZvcm1fX2lucHV0X3R5cGVfcm9sZVwiKTtcclxuY29uc3QgQXZhdGFyRWxlbWVudFNlbGVjdG9yID0gXCIucHJvZmlsZV9fcGhvdG9cIjtcclxuXHJcbi8qIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXHJcbi8qICAgICAgICAgICAgICAgICAgICAgICAgUG9wdXAgQUREIGNhcmQgZnVuY3Rpb25hbGl0eSAgICAgICAgICAgICAgICAgICAgICAgICovXHJcbi8qIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXHJcbmNvbnN0IHVzZXJJbnB1dEltYWdlVGl0bGUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFxyXG4gIFwiLmZvcm1fX2lucHV0X3R5cGVfaW1hZ2UtdGl0bGVcIlxyXG4pO1xyXG5jb25zdCB1c2VySW5wdXRJbWFnZUxpbmsgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFxyXG4gIFwiLmZvcm1fX2lucHV0X3R5cGVfaW1hZ2UtbGlua1wiXHJcbik7XHJcblxyXG4vKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xyXG4vKiAgICAgICAgICAgICAgICAgICAgICAgICAgRXNjYXBlIGtleSB2YWx1ZSBDT05TVCAgICAgICAgICAgICAgICAgICAgICAgKi9cclxuLyogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cclxuXHJcbmNvbnN0IEVTQ19CVVRUT04gPSBcIkVzY2FwZVwiO1xyXG5cclxuZXhwb3J0IHtcclxuICBFU0NfQlVUVE9OLFxyXG4gIGRlZmF1bHRGb3JtQ29uZmlnLFxyXG4gIHBvcHVwT3BlbkVkaXRQcm9maWxlQnV0dG9uLFxyXG4gIG5ld0NhcmRCdXR0b25FbGVtZW50LFxyXG4gIHBvcHVwT3BlbkVkaXRBdmF0YXJMaW5rLFxyXG4gIG5hbWVJbnB1dCxcclxuICByb2xlSW5wdXQsXHJcbiAgbmFtZUVsZW1lbnRTZWxlY3RvcixcclxuICByb2xlRWxlbWVudFNlbGVjdG9yLFxyXG4gIHVzZXJJbnB1dEltYWdlVGl0bGUsXHJcbiAgdXNlcklucHV0SW1hZ2VMaW5rLFxyXG4gIEF2YXRhckVsZW1lbnRTZWxlY3RvcixcclxufTtcclxuIiwiaW1wb3J0IHsgRVNDX0JVVFRPTiB9IGZyb20gXCIuLi91dGlscy9jb25zdGFudHMuanNcIjtcclxuXHJcbi8qKlxyXG4gKiBAY2xhc3MgUG9wdXAgb3BlbnMgYW5kIGNsb3NlcyB0aGUgcG9wdXAgd2luZG93XHJcbiAqIGFzIHBlciB0aGUgZm9sbG93aW5nIHJlcXVpcmVtZW50czpcclxuICogQGNvbnN0cnVjdG9yIGhhcyBhIHNpbmdsZVxyXG4gKiBAcGFyYW0gcG9wdXBTZWxlY3RvciBpdCBpcyB0aGUgcG9wdXAgc2VsZWN0b3IuXHJcbiAqIEl0IHN0b3JlcyB0aGVcclxuICogcHVibGljIEBtZXRob2Qgb3BlbigpIHRoYXQgd2lsbCBvcGVuIHRoZSBwb3B1cC5cclxuICogcHVibGljIEBtZXRob2QgY2xvc2UoKSB0aGF0IHdpbGwgY2xvc2UgdGhlIHBvcHVwLlxyXG4gKiBJdCBzdG9yZXMgYVxyXG4gKiBwcml2YXRlIEBtZXRob2QgX2hhbmRsZUVzY0Nsb3NlKCkgdGhhdCBwcmV2ZW50cyBkZWZhdWx0XHJcbiAqIGFuZCBzdG9yZXMgdGhlIGxvZ2ljIGZvciAgKiBjbG9zaW5nIHRoZSBwb3B1cCBieSBwcmVzc2luZyB0aGUgRXNjIGtleS5cclxuICogSXQgc3RvcmVzIGFcclxuICogcHVibGljIEBtZXRob2Qgc2V0RXZlbnRMaXN0ZW5lcnMoKSB0aGF0IGFkZHMgYSBjbGljayBldmVudCBsaXN0ZW5lclxyXG4gKiAgdG8gdGhlIGNsb3NlIGljb24gb2YgdGhlIHBvcHVwLiBUaGUgbW9kYWwgd2luZG93IHNob3VsZCBhbHNvXHJcbiAqIGNsb3NlIHdoZW4gdXNlcnMgY2xpY2sgb24gdGhlIHNoYWRlZCBhcmVhIGFyb3VuZCB0aGUgZm9ybS5cclxuICovXHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQb3B1cCB7XHJcbiAgY29uc3RydWN0b3IocG9wdXBTZWxlY3Rvcikge1xyXG4gICAgdGhpcy5fcG9wdXBFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcihwb3B1cFNlbGVjdG9yKTtcclxuICAgIC8vIHRoaXMuc2V0RXZlbnRMaXN0ZW5lcnMgPSB0aGlzLnNldEV2ZW50TGlzdGVuZXJzLmJpbmQodGhpcyk7XHJcbiAgICAvL1Jlc2VydmVkIGZvciBmdXR1cmUgdXNlOiBzb2x1dGlvbiBmb3Igbm90IGxvc2luZyBjb250ZXhcclxuICB9XHJcbiAgc2V0RXZlbnRMaXN0ZW5lcnMoKSB7XHJcbiAgICB0aGlzLl9wb3B1cEVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlZG93blwiLCAoZXZlbnQpID0+IHtcclxuICAgICAgaWYgKFxyXG4gICAgICAgIGV2ZW50LnRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoXCJwb3B1cFwiKSB8fFxyXG4gICAgICAgIGV2ZW50LnRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoXCJwb3B1cF9fY2xvc2UtYnV0dG9uXCIpXHJcbiAgICAgICAgLy8gfHwgIWV2ZW50LmNsb3Nlc3QoXCJwb3B1cFwiKVxyXG4gICAgICApIHtcclxuICAgICAgICB0aGlzLmNsb3NlKCk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgb3BlbigpIHtcclxuICAgIC8vZGVidWdnZXI7XHJcbiAgICB0aGlzLl9wb3B1cEVsZW1lbnQuY2xhc3NMaXN0LmFkZChcInBvcHVwX29wZW5lZFwiKTtcclxuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsIHRoaXMuX2hhbmRsZUVzY0Nsb3NlKTtcclxuICB9XHJcblxyXG4gIGNsb3NlKCkge1xyXG4gICAgdGhpcy5fcG9wdXBFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoXCJwb3B1cF9vcGVuZWRcIik7XHJcbiAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwia2V5ZG93blwiLCB0aGlzLl9oYW5kbGVFc2NDbG9zZSk7XHJcbiAgfVxyXG5cclxuICBfaGFuZGxlRXNjQ2xvc2UgPSAoZXZlbnQpID0+IHtcclxuICAgIGlmIChldmVudC5rZXkgPT09IEVTQ19CVVRUT04pIHtcclxuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgdGhpcy5jbG9zZSgpO1xyXG4gICAgfVxyXG4gIH07XHJcbn1cclxuIiwiaW1wb3J0IFBvcHVwIGZyb20gXCIuL1BvcHVwXCI7XHJcblxyXG4vKipcclxuICogQ3JlYXRlIFBvcHVwV2l0aEZvcm0gYXMgYSBjaGlsZCBjbGFzcyBvZiBQb3B1cC5cclxuICogVGhlIFBvcHVwV2l0aEZvcm0gY2xhc3MgbXVzdCBjb21wbHkgd2l0aCB0aGUgZm9sbG93aW5nIHJlcXVpcmVtZW50czpcclxuICogSXQgdGFrZXMgdHdvIGFyZ3VtZW50czpcclxuICogdGhlIHBvcHVwIHNlbGVjdG9yLFxyXG4gKiBhbmQgYSBjYWxsYmFjayBmdW5jdGlvblxyXG4gKiB3aGljaCBQb3B1cFdpdGhGb3JtIGNhbGxzIHdoZW4gdGhlIGZvcm3igJlzIHN1Ym1pdCBldmVudCBmaXJlcy5cclxuICogSXQgc3RvcmVzIGEgcHJpdmF0ZSBtZXRob2QgbmFtZWQgX2dldElucHV0VmFsdWVzKCksXHJcbiAqIHdoaWNoIGNvbGxlY3RzIGRhdGEgZnJvbSBhbGwgdGhlIGlucHV0IGZpZWxkcyBhbmQgcmV0dXJucyB0aGF0IGRhdGEgYXMgYW4gb2JqZWN0LlxyXG4gKiBJdCBtb2RpZmllcyB0aGUgc2V0RXZlbnRMaXN0ZW5lcnMoKSBwYXJlbnQgbWV0aG9kLlxyXG4gKiBUaGUgc2V0RXZlbnRMaXN0ZW5lcnMoKSBtZXRob2Qgb2YgdGhlIFBvcHVwV2l0aEZvcm0gY2xhc3NcclxuICogIGhhcyB0byBhZGQgdGhlIHN1Ym1pdCBldmVudCBoYW5kbGVyIHRvIHRoZSBmb3JtMFxyXG4gKiAgYW5kIHRoZSBjbGljayBldmVudCBsaXN0ZW5lciB0byB0aGUgY2xvc2UgaWNvbi5cclxuICogSXQgbW9kaWZpZXMgdGhlIGNsb3NlKCkgcGFyZW50IG1ldGhvZFxyXG4gKiBpbiBvcmRlciB0byByZXNldCB0aGUgZm9ybSBvbmNlIHRoZSBwb3B1cCBpcyBjbG9zZWQuXHJcbiAqL1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUG9wdXBXaXRoRm9ybSBleHRlbmRzIFBvcHVwIHtcclxuICBjb25zdHJ1Y3Rvcihwb3B1cFNlbGVjdG9yLCBoYW5kbGVGb3JtU3VibWl0KSB7XHJcbiAgICBzdXBlcihwb3B1cFNlbGVjdG9yKTtcclxuXHJcbiAgICAvL2NvbnNvbGUubG9nKHRoaXMuX3N1Ym1pdEJ1dHRvblRleHQpO1xyXG4gICAgdGhpcy5fcG9wdXBGb3JtID0gdGhpcy5fcG9wdXBFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuZm9ybVwiKTtcclxuXHJcbiAgICB0aGlzLl9zdWJtaXRCdXR0b24gPSB0aGlzLl9wb3B1cEZvcm0ucXVlcnlTZWxlY3RvcihcIi5mb3JtX19zdWJtaXQtYnV0dG9uXCIpO1xyXG4gICAgLy9jb25zb2xlLmxvZyh0aGlzLl9zdWJtaXRCdXR0b24pO1xyXG4gICAgdGhpcy5oYW5kbGVGb3JtU3VibWl0ID0gaGFuZGxlRm9ybVN1Ym1pdDtcclxuICAgIHRoaXMuX2lucHV0c0FycmF5ID0gWy4uLnRoaXMuX3BvcHVwRm9ybS5xdWVyeVNlbGVjdG9yQWxsKFwiLmZvcm1fX2lucHV0XCIpXTtcclxuICAgIC8vY29uc29sZS5sb2codGhpcy5faW5wdXRzQXJyYXkpO1xyXG4gIH1cclxuXHJcbiAgcmVuZGVyTG9hZGluZyhpc0xvYWRpbmcpIHtcclxuICAgIGlmIChpc0xvYWRpbmcpIHtcclxuICAgICAgdGhpcy5fc3VibWl0QnV0dG9uLnRleHRDb250ZW50ID0gXCJTYXZpbmcuLi5cIjtcclxuICAgICAgdGhpcy5fc3VibWl0QnV0dG9uLmRpc2FibGVkID0gdHJ1ZTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRoaXMuX3N1Ym1pdEJ1dHRvbi50ZXh0Q29udGVudCA9IFwiU2F2ZVwiO1xyXG4gICAgICB0aGlzLl9zdWJtaXRCdXR0b24uZGlzYWJsZWQgPSBmYWxzZTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGdldFBvcHVwRm9ybSgpIHtcclxuICAgIC8vY29uc29sZS5sb2codGhpcy5fcG9wdXBGb3JtKTtcclxuICAgIHJldHVybiB0aGlzLl9wb3B1cEZvcm07XHJcbiAgfVxyXG4gIF9nZXRJbnB1dFZhbHVlcygpIHtcclxuICAgIGNvbnN0IGlucHV0VmFsdWVzID0ge307XHJcbiAgICB0aGlzLl9pbnB1dHNBcnJheS5mb3JFYWNoKChpbnB1dCkgPT4ge1xyXG4gICAgICBpbnB1dFZhbHVlc1tpbnB1dC5uYW1lXSA9IGlucHV0LnZhbHVlO1xyXG4gICAgfSk7XHJcblxyXG4gICAgcmV0dXJuIGlucHV0VmFsdWVzO1xyXG4gIH1cclxuXHJcbiAgc2V0RXZlbnRMaXN0ZW5lcnMoKSB7XHJcbiAgICBzdXBlci5zZXRFdmVudExpc3RlbmVycygpO1xyXG5cclxuICAgIHRoaXMuX3BvcHVwRm9ybS5hZGRFdmVudExpc3RlbmVyKFwic3VibWl0XCIsICgpID0+IHtcclxuICAgICAgLyogICB0aGlzLl9wb3B1cEZvcm0ucXVlcnlTZWxlY3RvcihcIi5mb3JtX19zdWJtaXQtYnV0dG9uXCIpLmlubmVySFRNTCA9XHJcbiAgICAgICAgXCJTYXZpbmcuLi5cIjtcclxuICAgICAgY29uc29sZS5sb2codGhpcy5fc3VibWl0QnV0dG9uVGV4dCk7ICovXHJcbiAgICAgIHRoaXMuaGFuZGxlRm9ybVN1Ym1pdCh0aGlzLl9nZXRJbnB1dFZhbHVlcygpKTtcclxuICAgICAgLy8gICAgICBzZXRUaW1lb3V0KDEwMDAwMCk7XHJcbiAgICAgIC8qICAgICAgIHRoaXMuX3BvcHVwRm9ybS5xdWVyeVNlbGVjdG9yKFwiLmZvcm1fX3N1Ym1pdC1idXR0b25cIikuaW5uZXJIVE1MID1cclxuICAgICAgICB0aGlzLl9zdWJtaXRCdXR0b25UZXh0OyAqL1xyXG4gICAgICAvLyB0aGlzLmNsb3NlKCk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIGNsb3NlKCkge1xyXG4gICAgc3VwZXIuY2xvc2UoKTtcclxuICAgIHRoaXMuX3BvcHVwRm9ybS5yZXNldCgpO1xyXG4gIH1cclxufVxyXG4iLCIvKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuLyogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBNYWluIHNjcmlwdHMgZmlsZSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKi9cbi8qIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG4vKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgSW1wb3J0cyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqL1xuLyogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cbmltcG9ydCBcIi4vaW5kZXguY3NzXCI7XG5pbXBvcnQgQ2FyZCBmcm9tIFwiLi4vY29tcG9uZW50cy9DYXJkLmpzXCI7XG5pbXBvcnQgRm9ybVZhbGlkYXRvciBmcm9tIFwiLi4vY29tcG9uZW50cy9Gb3JtVmFsaWRhdG9yLmpzXCI7XG5pbXBvcnQgU2VjdGlvbiBmcm9tIFwiLi4vY29tcG9uZW50cy9TZWN0aW9uLmpzXCI7XG5pbXBvcnQgUG9wdXBXaXRoSW1hZ2UgZnJvbSBcIi4uL2NvbXBvbmVudHMvUG9wdXBXaXRoSW1hZ2UuanNcIjtcbmltcG9ydCBQb3B1cFdpdGhGb3JtIGZyb20gXCIuLi9jb21wb25lbnRzL1BvcHVwV2l0aEZvcm0uanNcIjtcbmltcG9ydCBQb3B1cFdpdGhTdWJtaXQgZnJvbSBcIi4uL2NvbXBvbmVudHMvUG9wdXBXaXRoU3VibWl0XCI7XG5pbXBvcnQgVXNlckluZm8gZnJvbSBcIi4uL2NvbXBvbmVudHMvVXNlckluZm8uanNcIjtcbmltcG9ydCBBcGkgZnJvbSBcIi4uL2NvbXBvbmVudHMvQXBpXCI7XG4vL2ltcG9ydCB7IGluaXRpYWxDYXJkcyB9IGZyb20gXCIuLi91dGlscy9jYXJkcy5qc1wiO1xuaW1wb3J0IHtcbiAgZGVmYXVsdEZvcm1Db25maWcsXG4gIHBvcHVwT3BlbkVkaXRQcm9maWxlQnV0dG9uLFxuICBuZXdDYXJkQnV0dG9uRWxlbWVudCxcbiAgbmFtZUlucHV0LFxuICByb2xlSW5wdXQsXG4gIG5hbWVFbGVtZW50U2VsZWN0b3IsXG4gIHJvbGVFbGVtZW50U2VsZWN0b3IsXG4gIHBvcHVwT3BlbkVkaXRBdmF0YXJMaW5rLFxuICBBdmF0YXJFbGVtZW50U2VsZWN0b3IsXG59IGZyb20gXCIuLi91dGlscy9jb25zdGFudHMuanNcIjtcblxuLyogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cbi8qICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFdyYXBwZXJzICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICovXG4vKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXG4vLyBzZWxlY3RpbmcgY2FyZCB0ZW1wbGF0ZSBlbGVtZW50XG5jb25zdCBjYXJkVGVtcGxhdGVFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNjYXJkLXRlbXBsYXRlXCIpO1xuXG4vKipcbiAqIEBmdW5jdGlvbiByZW5kZXJDYXJkIGNyZWF0ZXMgQ2FyZCBvYmplY3Qgd2l0aCBkYXRhIHBhcmFtIGFuZCB3aXRoIHRlbXBsYXRlIGhhcmRjb2RlZFxuICogQHBhcmFtIHthcnJheX0gZGF0YSBjb250YWlucyB7bmFtZSwgbGlua31cbiAqIEBwYXJhbSB7dGV4dH0gY2FyZFRlbXBsYXRlRWxlbWVudCBjb250YWlucyB0ZXh0IGlkIG9mIGNhcmQgZWxlbWVudCB0byBiZSBjbG9uZWRcbiAqIEBwYXJhbSB7QXJyb3cgZnVuY3Rpb259IGlzIGNhcmRDbGljayBoYW5kbGVyIGZvciBvcGVuaW5nIFBvcHVwV2l0aEltYWdlXG4gKi9cbmNvbnN0IHJlbmRlckNhcmQgPSAoZGF0YSkgPT4ge1xuICBjb25zdCBjYXJkID0gbmV3IENhcmQoXG4gICAgZGF0YSxcbiAgICBjYXJkVGVtcGxhdGVFbGVtZW50LFxuICAgICgpID0+IHtcbiAgICAgIGltYWdlUG9wdXAub3BlbihkYXRhLmxpbmtQbGFjZSwgZGF0YS5uYW1lUGxhY2UpO1xuICAgIH0sXG4gICAgKGlkKSA9PiB7XG4gICAgICBjb25maXJtTW9kYWwub3BlbigpO1xuXG4gICAgICBjb25maXJtTW9kYWwuc2V0QWN0aW9uKCgpID0+IHtcbiAgICAgICAgYXBpLmRlbGV0ZUNhcmQoaWQpLnRoZW4oKHJlcykgPT4ge1xuICAgICAgICAgIGNhcmQucmVtb3ZlQ2FyZCgpO1xuICAgICAgICAgIGNvbmZpcm1Nb2RhbC5jbG9zZSgpO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgKGlkKSA9PiB7XG4gICAgICBjb25zdCBpc0FscmVhZHlMaWtlZCA9IGNhcmQuZ2V0SXNMaWtlZCgpO1xuICAgICAgaWYgKGlzQWxyZWFkeUxpa2VkKSB7XG4gICAgICAgIC8vIGNvbnNvbGUubG9nKFwic2hvdWxkIERJU2xpa2VcIik7XG5cbiAgICAgICAgYXBpLmRpc0xpa2VDYXJkKGlkKS50aGVuKChyZXMpID0+IHtcbiAgICAgICAgICBjb25zb2xlLmxvZyhcInJlc1wiLCByZXMpO1xuICAgICAgICAgIGNhcmQucmVuZGVyTGlrZShyZXMubGlrZXMpO1xuXG4gICAgICAgICAgLyogICAgICBjYXJkLnJlbW92ZUNhcmQoKTtcbiAgICAgICAgICBjb25maXJtTW9kYWwuY2xvc2UoKTsgKi9cbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvL2NvbnNvbGUubG9nKFwic2hvdWxkIGxpa2VcIik7XG4gICAgICAgIGFwaS5saWtlQ2FyZChpZCkudGhlbigocmVzKSA9PiB7XG4gICAgICAgICAgY29uc29sZS5sb2coXCJyZXNcIiwgcmVzKTtcbiAgICAgICAgICBjYXJkLnJlbmRlckxpa2UocmVzLmxpa2VzKTtcblxuICAgICAgICAgIC8qICAgICAgY2FyZC5yZW1vdmVDYXJkKCk7XG4gICAgICAgICAgY29uZmlybU1vZGFsLmNsb3NlKCk7ICovXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgKTtcblxuICByZXR1cm4gY2FyZC5nZW5lcmF0ZUNhcmQoKTtcbn07XG5cbmNvbnN0IGFwaSA9IG5ldyBBcGkoe1xuICBiYXNlVXJsOiBcImh0dHBzOi8vYXJvdW5kLm5vbW9yZXBhcnRpZXMuY28vdjEvZ3JvdXAtMTJcIixcbiAgaGVhZGVyczoge1xuICAgIGF1dGhvcml6YXRpb246IFwiY2ZiZDc3MDctYTExMC00NGFlLThhYTgtNjMwMjk2ZjUzYzY2XCIsXG4gICAgXCJDb250ZW50LVR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCIsXG4gIH0sXG59KTtcblxuY29uc3QgY2FyZExpc3RTZWN0aW9uID0gbmV3IFNlY3Rpb24oXG4gIHsgaXRlbXM6IFtdLCByZW5kZXJlcjogcmVuZGVyQ2FyZCB9LFxuICBcIi5waG90by1ncmlkX19saXN0XCJcbik7XG5cbmFwaS5nZXRVc2VySW5mbygpLnRoZW4oKHJlcykgPT4ge1xuICB1c2VySW5mby5zZXRVc2VySW5mbyh7XG4gICAgcHJvZmlsZUZvcm1OYW1lSW5wdXQ6IHJlcy5uYW1lLFxuICAgIHByb2ZpbGVGb3JtUm9sZUlucHV0OiByZXMuYWJvdXQsXG4gICAgYXZhdGFyTGluazogcmVzLmF2YXRhcixcbiAgfSk7XG4gIC8vY29uc29sZS5sb2coXCJyZXNcIiwgcmVzKTtcbn0pO1xuXG4vL2FwaS5nZXRBdmF0YXJMaW5rKCkudGhlbigocmVzKSA9PiB7XG4vKiB1c2VySW5mby5zZXRVc2VySW5mbyh7XG4gICAgcHJvZmlsZUZvcm1OYW1lSW5wdXQ6IHJlcy5uYW1lLFxuICAgIHByb2ZpbGVGb3JtUm9sZUlucHV0OiByZXMuYWJvdXQsXG4gIH0pOyAqL1xuLy9jb25zb2xlLmxvZyhcInJlc1wiLCByZXMpO1xuLy99KTtcblxuZnVuY3Rpb24gaGFuZGxlQXZhdGFyRm9ybVN1Ym1pdChkYXRhKSB7XG4gIGVkaXRBdmF0YXJQb3B1cC5yZW5kZXJMb2FkaW5nKHRydWUpO1xuICB2YXIgdXNlcmRhdGEgPSBkYXRhLm5hbWU7XG4gIGFwaVxuICAgIC5zZXRBdmF0YXJMaW5rKHVzZXJkYXRhKVxuICAgIC50aGVuKChyZXMpID0+IHtcbiAgICAgIGNvbnNvbGUubG9nKHJlcyk7XG4gICAgICB1c2VySW5mby5zZXRVc2VyQXZhdGFyKHJlcyk7XG4gICAgICBlZGl0QXZhdGFyUG9wdXAuY2xvc2UoKTtcbiAgICB9KVxuICAgIC5jYXRjaCgoZXJyKSA9PiB7XG4gICAgICBjb25zb2xlLmxvZyhlcnIpO1xuICAgIH0pXG4gICAgLmZpbmFsbHkoKCkgPT4ge1xuICAgICAgZWRpdEF2YXRhclBvcHVwLnJlbmRlckxvYWRpbmcoZmFsc2UpO1xuICAgIH0pO1xufVxuXG5sZXQgdXNlcklkO1xuY29uc3QgY29ycmVjdE9iamVjdCA9IFtdO1xuUHJvbWlzZS5hbGwoW2FwaS5nZXRJbml0aWFsQ2FyZHMoKSwgYXBpLmdldFVzZXJJbmZvKCldKS50aGVuKFxuICAoW2NhcmREYXRhLCB1c2VyRGF0YV0pID0+IHtcbiAgICB1c2VySWQgPSB1c2VyRGF0YS5faWQ7XG5cbiAgICBjYXJkRGF0YS5mb3JFYWNoKChlbGVtZW50KSA9PiB7XG4gICAgICBjb25zdCBpID0ge1xuICAgICAgICBjcmVhdGVkQXQ6IGVsZW1lbnQuY3JlYXRlZEF0LFxuICAgICAgICBuYW1lUGxhY2U6IGVsZW1lbnQubmFtZSxcbiAgICAgICAgX2lkOiBlbGVtZW50Ll9pZCxcbiAgICAgICAgbGlua1BsYWNlOiBlbGVtZW50LmxpbmssXG4gICAgICAgIG93bmVyOiBlbGVtZW50Lm93bmVyLFxuICAgICAgICBsaWtlczogZWxlbWVudC5saWtlcyxcbiAgICAgICAgdXNlcl9pZDogdXNlcklkLFxuICAgICAgfTtcbiAgICAgIGNvcnJlY3RPYmplY3QucHVzaChpKTtcbiAgICB9KTtcblxuICAgIC8qICAgY29uc3QgY2FyZExpc3RTZWN0aW9uID0gICovIG5ldyBTZWN0aW9uKFxuICAgICAgeyBpdGVtczogY29ycmVjdE9iamVjdCwgcmVuZGVyZXI6IHJlbmRlckNhcmQgfSxcbiAgICAgIFwiLnBob3RvLWdyaWRfX2xpc3RcIlxuICAgICk7XG4gIH1cbik7XG5cbi8qIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG4vKiAgICAgICAgICAgICAgICAgICAgICAgIE9iamVjdHMgY3JlYXRpb24gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqL1xuLyogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cbi8qKlxuICogTmV3bHkgY3JlYXRlZCBAY29uc3RhbnQgY2FyZExpc3RTZWN0aW9uIGNvbnRhaW5zIFNlY3Rpb24gQG9iamVjdFxuICpcbiAqXG4gKi9cblxuLyogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cbi8qICAgICAgICAgICAgICAgICAgICBQb3B1cCBGb3JtIEhhbmRsZXJzICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICovXG4vKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXG5mdW5jdGlvbiBoYW5kbGVFZGl0Rm9ybVN1Ym1pdChkYXRhKSB7XG4gIGVkaXRQcm9maWxlUG9wdXAucmVuZGVyTG9hZGluZyh0cnVlKTtcbiAgLy9kZWJ1Z2dlcjtcbiAgY29uc29sZS5sb2coZGF0YSk7XG4gIGFwaVxuICAgIC5zZXRVc2VySW5mbyh7XG4gICAgICBuYW1lOiBkYXRhLnByb2ZpbGVGb3JtTmFtZUlucHV0LFxuICAgICAgYWJvdXQ6IGRhdGEucHJvZmlsZUZvcm1Sb2xlSW5wdXQsXG4gICAgfSlcbiAgICAudGhlbigocmVzKSA9PiB7XG4gICAgICBjb25zb2xlLmxvZyhyZXMpO1xuICAgICAgdXNlckluZm8uc2V0VXNlckluZm8oe1xuICAgICAgICBwcm9maWxlRm9ybU5hbWVJbnB1dDogcmVzLm5hbWUsXG4gICAgICAgIHByb2ZpbGVGb3JtUm9sZUlucHV0OiByZXMuYWJvdXQsXG4gICAgICB9KTtcbiAgICB9KVxuXG4gICAgLmNhdGNoKChlcnIpID0+IHtcbiAgICAgIGNvbnNvbGUubG9nKGVycik7XG4gICAgfSlcbiAgICAuZmluYWxseSgoKSA9PiB7XG4gICAgICBlZGl0UHJvZmlsZVBvcHVwLnJlbmRlckxvYWRpbmcoZmFsc2UpO1xuICAgICAgZWRpdFByb2ZpbGVQb3B1cC5jbG9zZSgpO1xuICAgIH0pO1xufVxuXG4vL2Z1bmN0aW9uIGhhbmRsZUF2YXRhckZvcm1TdWJtaXRcblxuZnVuY3Rpb24gaGFuZGxlTmV3Q2FyZEZvcm1TdWJtaXQoZGF0YSkge1xuICBhZGRDYXJkUG9wdXAucmVuZGVyTG9hZGluZyh0cnVlKTtcbiAgYXBpXG4gICAgLmNyZWF0ZUNhcmQoeyBuYW1lOiBkYXRhLm5hbWVQbGFjZSwgbGluazogZGF0YS5saW5rUGxhY2UgfSlcbiAgICAudGhlbigocmVzKSA9PiB7XG4gICAgICAvL2NvbnNvbGUubG9nKHJlcyk7XG4gICAgICBjYXJkTGlzdFNlY3Rpb24uYWRkSXRlbShcbiAgICAgICAgcmVuZGVyQ2FyZCh7XG4gICAgICAgICAgbmFtZVBsYWNlOiByZXMubmFtZSxcbiAgICAgICAgICBsaW5rUGxhY2U6IHJlcy5saW5rLFxuICAgICAgICAgIF9pZDogcmVzLl9pZCxcbiAgICAgICAgICBvd25lcjogcmVzLm93bmVyLFxuICAgICAgICAgIHVzZXJfaWQ6IHVzZXJJZCxcbiAgICAgICAgICBsaWtlczogcmVzLmxpa2VzLFxuICAgICAgICB9KVxuICAgICAgKTtcbiAgICB9KVxuXG4gICAgLmNhdGNoKChlcnIpID0+IHtcbiAgICAgIGNvbnNvbGUubG9nKGVycik7XG4gICAgfSlcbiAgICAuZmluYWxseSgoKSA9PiB7XG4gICAgICBhZGRDYXJkUG9wdXAucmVuZGVyTG9hZGluZyhmYWxzZSk7XG4gICAgICBhZGRDYXJkUG9wdXAuY2xvc2UoKTtcbiAgICB9KTtcbn1cbi8qIGNvbnN0IGNhcmREZWxldGUgPSAoaWQpID0+IHtcbiAgY29uc29sZS5sb2coaWQpO1xuICBjb25maXJtTW9kYWwub3BlbigpO1xuXG4gIGNvbmZpcm1Nb2RhbC5zZXRBY3Rpb24oKCkgPT4ge1xuICAgIGNvbnNvbGUubG9nKFwic2V0IGFjdGlvblwiKTtcbiAgICBhcGkuZGVsZXRlQ2FyZChpZCkudGhlbigocmVzKSA9PiB7XG4gICAgICBjb25zb2xlLmxvZyhcIkNhcmQgaXMgZGVsZXRlZFwiLCByZXMpO1xuICAgICAgY2FyZC5yZW1vdmVDYXJkKCk7XG4gICAgfSk7XG4gIH0pO1xufTsgKi9cblxuY29uc3QgdXNlckluZm8gPSBuZXcgVXNlckluZm8oXG4gIG5hbWVFbGVtZW50U2VsZWN0b3IsXG4gIHJvbGVFbGVtZW50U2VsZWN0b3IsXG4gIEF2YXRhckVsZW1lbnRTZWxlY3RvclxuKTtcblxuY29uc3QgZWRpdFByb2ZpbGVQb3B1cCA9IG5ldyBQb3B1cFdpdGhGb3JtKFxuICBcIi5wb3B1cF90eXBlX2VkaXQtcHJvZmlsZVwiLFxuICBoYW5kbGVFZGl0Rm9ybVN1Ym1pdFxuKTtcbmNvbnN0IGFkZENhcmRQb3B1cCA9IG5ldyBQb3B1cFdpdGhGb3JtKFxuICBcIi5wb3B1cF90eXBlX25ldy1jYXJkXCIsXG4gIGhhbmRsZU5ld0NhcmRGb3JtU3VibWl0XG4pO1xuXG5jb25zdCBlZGl0QXZhdGFyUG9wdXAgPSBuZXcgUG9wdXBXaXRoRm9ybShcbiAgXCIucG9wdXBfdHlwZV9hdmF0YXJfY2hhbmdlXCIsXG4gIGhhbmRsZUF2YXRhckZvcm1TdWJtaXRcbik7XG5cbmNvbnN0IGltYWdlUG9wdXAgPSBuZXcgUG9wdXBXaXRoSW1hZ2UoXCIucG9wdXBfdHlwZV9wcmV2aWV3XCIpO1xuY29uc3QgY29uZmlybU1vZGFsID0gbmV3IFBvcHVwV2l0aFN1Ym1pdChcIi5wb3B1cF90eXBlX2NvbmZpcm0tZGVsZXRlLWNhcmRcIik7XG5cbi8vY29uc29sZS5sb2coZWRpdEF2YXRhclBvcHVwKTtcbi8qIGNvbnN0IGZvcm1WYWxpZGF0b3JzID0ge307XG5cbi8vIGVuYWJsZSB2YWxpZGF0aW9uXG5jb25zdCBlbmFibGVWYWxpZGF0aW9uID0gKGNvbmZpZykgPT4ge1xuICBjb25zdCBmb3JtTGlzdCA9IEFycmF5LmZyb20oZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChjb25maWcuZm9ybVNlbGVjdG9yKSk7XG4gIGZvcm1MaXN0LmZvckVhY2goKGZvcm1FbGVtZW50KSA9PiB7XG4gICAgY29uc3QgdmFsaWRhdG9yID0gbmV3IEZvcm1WYWxpZGF0b3IoZm9ybUVsZW1lbnQsIGNvbmZpZyk7XG4gICAgLy8gaGVyZSB5b3UgZ2V0IHRoZSBuYW1lIG9mIHRoZSBmb3JtXG4gICAgY29uc3QgZm9ybU5hbWUgPSBmb3JtRWxlbWVudC5nZXRBdHRyaWJ1dGUoXCJuYW1lXCIpO1xuXG4gICAgLy8gaGVyZSB5b3Ugc3RvcmUgYSB2YWxpZGF0b3IgYnkgdGhlIGBuYW1lYCBvZiB0aGUgZm9ybVxuICAgIGZvcm1WYWxpZGF0b3JzW2Zvcm1OYW1lXSA9IHZhbGlkYXRvcjtcbiAgICB2YWxpZGF0b3IuZW5hYmxlVmFsaWRhdGlvbigpO1xuICB9KTtcbn07XG5cbmVuYWJsZVZhbGlkYXRpb24oY29uZmlnKTsgKi9cblxuY29uc3QgYWRkQ2FyZEZvcm0gPSBuZXcgRm9ybVZhbGlkYXRvcihcbiAgZGVmYXVsdEZvcm1Db25maWcsXG4gIGFkZENhcmRQb3B1cC5nZXRQb3B1cEZvcm0oKVxuKTtcbmNvbnN0IGVkaXRGb3JtID0gbmV3IEZvcm1WYWxpZGF0b3IoXG4gIGRlZmF1bHRGb3JtQ29uZmlnLFxuICBlZGl0UHJvZmlsZVBvcHVwLmdldFBvcHVwRm9ybSgpXG4pO1xuXG5jb25zdCBlZGl0QXZhdGFyRm9ybSA9IG5ldyBGb3JtVmFsaWRhdG9yKFxuICBkZWZhdWx0Rm9ybUNvbmZpZyxcbiAgZWRpdEF2YXRhclBvcHVwLmdldFBvcHVwRm9ybSgpXG4pO1xuXG5hZGRDYXJkRm9ybS5lbmFibGVWYWxpZGF0aW9uKCk7XG5lZGl0Rm9ybS5lbmFibGVWYWxpZGF0aW9uKCk7XG5lZGl0QXZhdGFyRm9ybS5lbmFibGVWYWxpZGF0aW9uKCk7XG5cbi8qIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG4vKiAgICAgICAgICAgICAgICAgICAgICAgICBQb3B1cCBFdmVudCBMaXN0ZW5lcnMgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqL1xuLyogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cbmltYWdlUG9wdXAuc2V0RXZlbnRMaXN0ZW5lcnMoKTtcblxuZWRpdFByb2ZpbGVQb3B1cC5zZXRFdmVudExpc3RlbmVycygpO1xuXG5hZGRDYXJkUG9wdXAuc2V0RXZlbnRMaXN0ZW5lcnMoKTtcblxuY29uZmlybU1vZGFsLnNldEV2ZW50TGlzdGVuZXJzKCk7XG5lZGl0QXZhdGFyUG9wdXAuc2V0RXZlbnRMaXN0ZW5lcnMoKTtcbi8qIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG4vKiAgICAgICAgICAgICAgICAgICBPcGVuIFBvcHVwIEJ1dHRvbnMgbGlzdGVuZXJzICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqL1xuLyogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblxucG9wdXBPcGVuRWRpdFByb2ZpbGVCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcbiAgY29uc3QgeyBuYW1lLCBqb2IgfSA9IHVzZXJJbmZvLmdldFVzZXJJbmZvKCk7XG5cbiAgZWRpdFByb2ZpbGVQb3B1cC5vcGVuKCk7XG4gIGVkaXRGb3JtLnJlc2V0VmFsaWRhdGlvbigpO1xuICBuYW1lSW5wdXQudmFsdWUgPSBuYW1lO1xuICByb2xlSW5wdXQudmFsdWUgPSBqb2I7XG59KTtcblxubmV3Q2FyZEJ1dHRvbkVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcbiAgYWRkQ2FyZFBvcHVwLm9wZW4oKTtcbiAgYWRkQ2FyZEZvcm0ucmVzZXRWYWxpZGF0aW9uKCk7XG59KTtcblxucG9wdXBPcGVuRWRpdEF2YXRhckxpbmsuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcbiAgZWRpdEF2YXRhclBvcHVwLm9wZW4oKTtcbiAgZWRpdEF2YXRhckZvcm0ucmVzZXRWYWxpZGF0aW9uKCk7XG59KTtcbiIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIEFwaSB7XG4gIGNvbnN0cnVjdG9yKHsgYmFzZVVybCwgaGVhZGVycyB9KSB7XG4gICAgdGhpcy5fYmFzZVVybCA9IGJhc2VVcmw7XG4gICAgdGhpcy5faGVhZGVycyA9IGhlYWRlcnM7XG4gIH1cbiAgX2N1c3RvbUZldGNoID0gYXN5bmMgKHVybCwgaGVhZGVycykgPT4ge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCByZXMgPSBhd2FpdCBmZXRjaCh1cmwsIGhlYWRlcnMpO1xuICAgICAgcmV0dXJuIGF3YWl0IChyZXMub2sgPyByZXMuanNvbigpIDogUHJvbWlzZS5yZWplY3QocmVzLnN0YXR1c1RleHQpKTtcbiAgICB9IGNhdGNoIChtZXNzYWdlKSB7XG4gICAgICByZXR1cm4gY29uc29sZS5sb2cobWVzc2FnZSk7XG4gICAgfVxuICB9O1xuXG4gIGdldEluaXRpYWxDYXJkcygpIHtcbiAgICAvKiAgICAgY29uc29sZS5sb2coXG4gICAgICB0aGlzLl9jdXN0b21GZXRjaChgJHt0aGlzLl9iYXNlVXJsfS9jYXJkc2AsIHsgaGVhZGVyczogdGhpcy5faGVhZGVycyB9KVxuICAgICk7ICovXG4gICAgcmV0dXJuIHRoaXMuX2N1c3RvbUZldGNoKGAke3RoaXMuX2Jhc2VVcmx9L2NhcmRzYCwge1xuICAgICAgaGVhZGVyczogdGhpcy5faGVhZGVycyxcbiAgICB9KTtcbiAgfVxuICBnZXRVc2VySW5mbygpIHtcbiAgICByZXR1cm4gdGhpcy5fY3VzdG9tRmV0Y2goYCR7dGhpcy5fYmFzZVVybH0vdXNlcnMvbWVgLCB7XG4gICAgICBoZWFkZXJzOiB0aGlzLl9oZWFkZXJzLFxuICAgIH0pO1xuICB9XG5cbiAgLyogIGdldEF2YXRhckxpbmsoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2N1c3RvbUZldGNoKGAke3RoaXMuX2Jhc2VVcmx9L3VzZXJzL21lL2F2YXRhcmAsIHtcbiAgICAgIGhlYWRlcnM6IHRoaXMuX2hlYWRlcnMsXG4gICAgfSk7XG4gIH0gKi9cblxuICBzZXRBdmF0YXJMaW5rKGRhdGEpIHtcbiAgICBjb25zb2xlLmxvZyhKU09OLnN0cmluZ2lmeShkYXRhKSk7XG4gICAgcmV0dXJuIHRoaXMuX2N1c3RvbUZldGNoKGAke3RoaXMuX2Jhc2VVcmx9L3VzZXJzL21lL2F2YXRhcmAsIHtcbiAgICAgIGhlYWRlcnM6IHRoaXMuX2hlYWRlcnMsXG4gICAgICBtZXRob2Q6IFwiUEFUQ0hcIixcbiAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHsgYXZhdGFyOiBkYXRhIH0pLFxuICAgIH0pO1xuICB9XG5cbiAgc2V0VXNlckluZm8oZGF0YSkge1xuICAgIHJldHVybiB0aGlzLl9jdXN0b21GZXRjaChgJHt0aGlzLl9iYXNlVXJsfS91c2Vycy9tZWAsIHtcbiAgICAgIGhlYWRlcnM6IHRoaXMuX2hlYWRlcnMsXG4gICAgICBtZXRob2Q6IFwiUEFUQ0hcIixcbiAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KGRhdGEpLFxuICAgIH0pO1xuICB9XG5cbiAgY3JlYXRlQ2FyZChkYXRhKSB7XG4gICAgcmV0dXJuIHRoaXMuX2N1c3RvbUZldGNoKGAke3RoaXMuX2Jhc2VVcmx9L2NhcmRzYCwge1xuICAgICAgaGVhZGVyczogdGhpcy5faGVhZGVycyxcbiAgICAgIG1ldGhvZDogXCJQT1NUXCIsXG4gICAgICBib2R5OiBKU09OLnN0cmluZ2lmeShkYXRhKSxcbiAgICB9KTtcbiAgfVxuXG4gIGRlbGV0ZUNhcmQoY2FyZElkKSB7XG4gICAgcmV0dXJuIHRoaXMuX2N1c3RvbUZldGNoKGAke3RoaXMuX2Jhc2VVcmx9L2NhcmRzLyR7Y2FyZElkfWAsIHtcbiAgICAgIGhlYWRlcnM6IHRoaXMuX2hlYWRlcnMsXG4gICAgICBtZXRob2Q6IFwiREVMRVRFXCIsXG4gICAgfSk7XG4gIH1cbiAgbGlrZUNhcmQoY2FyZElkKSB7XG4gICAgcmV0dXJuIHRoaXMuX2N1c3RvbUZldGNoKGAke3RoaXMuX2Jhc2VVcmx9L2NhcmRzL2xpa2VzLyR7Y2FyZElkfWAsIHtcbiAgICAgIGhlYWRlcnM6IHRoaXMuX2hlYWRlcnMsXG4gICAgICBtZXRob2Q6IFwiUFVUXCIsXG4gICAgfSk7XG4gIH1cblxuICBkaXNMaWtlQ2FyZChjYXJkSWQpIHtcbiAgICByZXR1cm4gdGhpcy5fY3VzdG9tRmV0Y2goYCR7dGhpcy5fYmFzZVVybH0vY2FyZHMvbGlrZXMvJHtjYXJkSWR9YCwge1xuICAgICAgaGVhZGVyczogdGhpcy5faGVhZGVycyxcbiAgICAgIG1ldGhvZDogXCJERUxFVEVcIixcbiAgICB9KTtcbiAgfVxuXG4gIC8vIG90aGVyIG1ldGhvZHMgZm9yIHdvcmtpbmcgd2l0aCB0aGUgQVBJXG59XG4iLCIvKipUaGUgVXNlckluZm8gY2xhc3MgaXMgcmVzcG9uc2libGUgZm9yXG4gKiByZW5kZXJpbmcgaW5mb3JtYXRpb24gYWJvdXQgdGhlIHVzZXIgb24gdGhlIHBhZ2UuXG4gKiBUaGlzIGNsYXNzIHNob3VsZDpcbiAqIFRha2UgYW4gb2JqZWN0IHdpdGggdGhlIHNlbGVjdG9ycyBvZiB0d28gZWxlbWVudHMgaW50byB0aGUgY29uc3RydWN0b3I6XG4gKiBvbmUgY29udGFpbmluZyB0aGUgdXNlcidzIG5hbWUsXG4gKiBhbmQgYW5vdGhlciBjb250YWluaW5nIHRoZSB1c2VyJ3Mgam9iLlxuICogU3RvcmUgYSBwdWJsaWMgbWV0aG9kIG5hbWVkIGdldFVzZXJJbmZvKCksXG4gKiB3aGljaCByZXR1cm5zIGFuIG9iamVjdCB3aXRoIGluZm9ybWF0aW9uIGFib3V0IHRoZSB1c2VyLlxuICogVGhpcyBtZXRob2Qgd2lsbCBiZSBoYW5keSBmb3IgY2FzZXMgd2hlbiBpdCdzIG5lY2Vzc2FyeSB0byBkaXNwbGF5IHRoZSB1c2VyIGRhdGEgaW4gdGhlIG9wZW4gZm9ybS5cbiAqIFN0b3JlIGEgcHVibGljIG1ldGhvZCBuYW1lZCBzZXRVc2VySW5mbygpLFxuICogd2hpY2ggdGFrZXMgbmV3IHVzZXIgZGF0YSBhbmQgYWRkcyBpdCBvbiB0aGUgcGFnZS5cbiAqL1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBVc2VySW5mbyB7XG4gIGNvbnN0cnVjdG9yKG5hbWVTZWxlY3Rvciwgam9iU2VsZWN0b3IsIGF2YXRhclNlbGVjdG9yKSB7XG4gICAgdGhpcy5fbmFtZVNlbGVjdG9yID0gbmFtZVNlbGVjdG9yO1xuICAgIHRoaXMuX2pvYlNlbGVjdG9yID0gam9iU2VsZWN0b3I7XG4gICAgdGhpcy5fbmFtZUVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKG5hbWVTZWxlY3Rvcik7XG4gICAgdGhpcy5fam9iRWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3Ioam9iU2VsZWN0b3IpO1xuICAgIHRoaXMuX2F2YXRhciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYXZhdGFyU2VsZWN0b3IpO1xuXG4gICAgLy8gY29uc29sZS5sb2codGhpcyk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBnZXRVc2VySW5mbygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbmFtZTogdGhpcy5fbmFtZUVsZW1lbnQudGV4dENvbnRlbnQsXG4gICAgICBqb2I6IHRoaXMuX2pvYkVsZW1lbnQudGV4dENvbnRlbnQsXG4gICAgfTtcbiAgfVxuXG4gIHNldFVzZXJJbmZvKGluZm8pIHtcbiAgICB0aGlzLl9uYW1lRWxlbWVudC50ZXh0Q29udGVudCA9IGluZm9bXCJwcm9maWxlRm9ybU5hbWVJbnB1dFwiXTtcbiAgICB0aGlzLl9qb2JFbGVtZW50LnRleHRDb250ZW50ID0gaW5mb1tcInByb2ZpbGVGb3JtUm9sZUlucHV0XCJdO1xuICAgIHRoaXMuX2F2YXRhci5hbHQgPSBgSW1hZ2Ugb2YgJHtpbmZvW1wicHJvZmlsZUZvcm1OYW1lSW5wdXRcIl19YDtcbiAgICB0aGlzLl9hdmF0YXIuc3JjID0gaW5mb1tcImF2YXRhckxpbmtcIl07XG4gIH1cblxuICBzZXRVc2VyQXZhdGFyKHsgYXZhdGFyIH0pIHtcbiAgICB0aGlzLl9hdmF0YXIuc3JjID0gYXZhdGFyO1xuICB9XG59XG4iLCJpbXBvcnQgUG9wdXAgZnJvbSBcIi4vUG9wdXAuanNcIjtcclxuXHJcbi8qKlxyXG4gKiBAY2xhc3MgUG9wdXBXaXRoSW1hZ2UgYSBjaGlsZCBAY2xhc3Mgb2YgUG9wdXAuXHJcbiAqIFRoaXMgY2xhc3MgaGFzIHRvIGNoYW5nZSB0aGUgQHBhcmVudCBvcGVuKCkgQG1ldGhvZC5cclxuICogVGhlIEBtZXRob2Qgb3BlbigpIG9mIHRoZSBQb3B1cFdpdGhJbWFnZSBAY2xhc3MsIGFkZHMgYW4gaW1hZ2UgdG8gdGhlIHBvcHVwXHJcbiAqIGFuZCB0aGUgY29ycmVzcG9uZGluZyBpbWFnZSBzcmMgYXR0cmlidXRlIGFsb25nIHdpdGggYSBjYXB0aW9uIGZvciB0aGUgaW1hZ2UuXHJcbiAqXHJcbiAqIFB1dHMgXCJuYW1lXCIgZnJvbSBAYXJndW1lbnRzIHRvIHRoZSBcIi5wb3B1cF9fY2FwdGlvblwiIHNlbGVjdG9yXHJcbiAqIGZpbmQgaW1hZ2UgYnkgdGhlIHBvcHVwX19pbWFnZVwiIHNlbGVjdG9yIHNldCBcInNyY1wiIGFuZCBcImFsdFwiIGZvciBpdFxyXG4gKiAgY2FsbCBAY2xhc3Mgc3VwZXIub3BlbiwgaXQgd2lsbCBjYWxsIHRoZSBvcmlnaW5hbCBAbWV0aG9kIGZyb20gb3JpZ2luYWwgQGNsYXNzIFBvcHVwXHJcbiAqL1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUG9wdXBXaXRoSW1hZ2UgZXh0ZW5kcyBQb3B1cCB7XHJcbiAgY29uc3RydWN0b3IocG9wdXBTZWxlY3Rvcikge1xyXG4gICAgc3VwZXIocG9wdXBTZWxlY3Rvcik7XHJcbiAgICB0aGlzLl9wcmV2aWV3UG9wdXBJbWFnZSA9IHRoaXMuX3BvcHVwRWxlbWVudC5xdWVyeVNlbGVjdG9yKFxyXG4gICAgICBcIi5wb3B1cF9fcHJldmlldy1pbWFnZVwiXHJcbiAgICApO1xyXG4gICAgdGhpcy5fcHJldmlld1BvcHVwRGVzY3JpcHRpb24gPSB0aGlzLl9wb3B1cEVsZW1lbnQucXVlcnlTZWxlY3RvcihcclxuICAgICAgXCIucG9wdXBfX2Rlc2NyaXB0aW9uXCJcclxuICAgICk7XHJcbiAgfVxyXG4gIG9wZW4gPSAobGlua1BsYWNlLCBuYW1lUGxhY2UpID0+IHtcclxuICAgIC8vICBjb25zb2xlLmxvZyhsaW5rUGxhY2UpO1xyXG5cclxuICAgIHRoaXMuX3ByZXZpZXdQb3B1cEltYWdlLnNyYyA9IGxpbmtQbGFjZTtcclxuICAgIHRoaXMuX3ByZXZpZXdQb3B1cEltYWdlLmFsdCA9IGBQaWN0dXJlIG9mICR7bmFtZVBsYWNlfWA7XHJcbiAgICB0aGlzLl9wcmV2aWV3UG9wdXBEZXNjcmlwdGlvbi50ZXh0Q29udGVudCA9IG5hbWVQbGFjZTtcclxuXHJcbiAgICBzdXBlci5vcGVuKCk7XHJcbiAgfTtcclxufVxyXG4iLCJpbXBvcnQgUG9wdXAgZnJvbSBcIi4vUG9wdXAuanNcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBvcHVwV2l0aFN1Ym1pdCBleHRlbmRzIFBvcHVwIHtcclxuICBzZXRBY3Rpb24oYWN0aW9uKSB7XHJcbiAgICB0aGlzLl9zdWJtaXRIYW5kbGVyID0gYWN0aW9uO1xyXG4gIH1cclxuICBzZXRFdmVudExpc3RlbmVycygpIHtcclxuICAgIHRoaXMuX3BvcHVwRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwic3VibWl0XCIsIChldmVudCkgPT4ge1xyXG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICB0aGlzLl9zdWJtaXRIYW5kbGVyKCk7XHJcbiAgICAgIC8vIHRoaXMuY2xvc2UoKTtcclxuICAgIH0pO1xyXG5cclxuICAgIHN1cGVyLnNldEV2ZW50TGlzdGVuZXJzKCk7XHJcbiAgfVxyXG59XHJcbiJdLCJuYW1lcyI6WyJDYXJkIiwiY29uc3RydWN0b3IiLCJkYXRhIiwiY2FyZFNlbGVjdG9yIiwiaGFuZGxlQ2FyZENsaWNrIiwiaGFuZGxlVHJhc2hCdXR0b25DbGljayIsImhhbmRsZUxpa2VCdXR0b25DbGljayIsInRoaXMiLCJfY2FyZFRlbXBsYXRlIiwiY2xvbmVOb2RlIiwiX2NhcmRTZWxlY3RvciIsIl9pZCIsIl9vd25lcklkIiwib3duZXIiLCJfdXNlcklkIiwidXNlcl9pZCIsIl9saWtlc0NvdW50IiwibGlrZXMiLCJsZW5ndGgiLCJfbGlrZXNMaXN0IiwiX2lzTGlrZWQiLCJzb21lIiwicGVyc29uIiwiY29udGVudCIsInF1ZXJ5U2VsZWN0b3IiLCJfaGFuZGxlVHJhc2hCdXR0b25DbGljayIsIl9oYW5kbGVDYXJkQ2xpY2siLCJfaGFuZGxlTGlrZUJ1dHRvbkNsaWNrIiwiX25hbWUiLCJuYW1lUGxhY2UiLCJfbGluayIsImxpbmtQbGFjZSIsIl9hbHQiLCJfc2V0RXZlbnRMaXN0ZW5lcnMiLCJfY2FyZExpa2VCdXR0b25FbGVtZW50IiwiYWRkRXZlbnRMaXN0ZW5lciIsImUiLCJfY2FyZFRyYXNoQnV0dG9uRWxlbWVudCIsIl9jYXJkSW1hZ2VFbGVtZW50IiwiZ2V0SXNMaWtlZCIsInJlbmRlckxpa2UiLCJuZXdMaWtlcyIsIl9lbGVtZW50IiwidGV4dENvbnRlbnQiLCJjbGFzc0xpc3QiLCJ0b2dnbGUiLCJnZW5lcmF0ZUNhcmQiLCJfZ2V0VGVtcGxhdGUiLCJfY2FyZFRpdGxlRWxlbWVudCIsIl9jYXJkTGlrZXNDb3VudGVyRWxlbWVudCIsInNyYyIsImFsdCIsInJlbW92ZSIsInJlbW92ZUNhcmQiLCJjb25maWciLCJmb3JtRWwiLCJfdG9nZ2xlQnV0dG9uIiwiX2lucHV0TGlzdCIsImZvckVhY2giLCJpbnB1dCIsIl/RgWhlY2tJbnB1dFZhbGlkaXR5IiwiZXJyb3JTcGFuIiwiaWQiLCJ2YWxpZGF0aW9uTWVzc2FnZSIsImFkZCIsIl9jb25maWciLCJlcnJvckNsYXNzIiwiaW5wdXRFcnJvckNsYXNzIiwidmFsaWRpdHkiLCJ2YWxpZCIsIl9oaWRlSW5wdXRFcnJvciIsIl9zaG93SW5wdXRFcnJvciIsIl9idXR0b25FbGVtZW50Iiwic3VibWl0QnV0dG9uU2VsZWN0b3IiLCJBcnJheSIsImZyb20iLCJxdWVyeVNlbGVjdG9yQWxsIiwiaW5wdXRTZWxlY3RvciIsIl9oYXNWYWxpZElucHV0cyIsImRpc2FibGVkIiwiZXZlcnkiLCJlbmFibGVWYWxpZGF0aW9uIiwiZXZlbnQiLCJwcmV2ZW50RGVmYXVsdCIsInJlc2V0VmFsaWRhdGlvbiIsInJlc2V0IiwiU2VjdGlvbiIsImNvbnRhaW5lclNlbGVjdG9yIiwiaXRlbXMiLCJyZW5kZXJlciIsImVsZW1lbnQiLCJjb250YWluZXIiLCJwcmVwZW5kIiwiaW5pdGlhbEl0ZW1zIiwiZG9jdW1lbnQiLCJyZW5kZXJJdGVtcyIsIml0ZW0iLCJhZGRJdGVtIiwiZGVmYXVsdEZvcm1Db25maWciLCJpbmFjdGl2ZUJ1dHRvbkNsYXNzIiwicG9wdXBPcGVuRWRpdFByb2ZpbGVCdXR0b24iLCJuZXdDYXJkQnV0dG9uRWxlbWVudCIsInBvcHVwT3BlbkVkaXRBdmF0YXJMaW5rIiwibmFtZUlucHV0Iiwicm9sZUVsZW1lbnRTZWxlY3RvciIsInJvbGVJbnB1dCIsIlBvcHVwIiwicG9wdXBTZWxlY3RvciIsImtleSIsImNsb3NlIiwiX3BvcHVwRWxlbWVudCIsInNldEV2ZW50TGlzdGVuZXJzIiwidGFyZ2V0IiwiY29udGFpbnMiLCJvcGVuIiwiX2hhbmRsZUVzY0Nsb3NlIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsIlBvcHVwV2l0aEZvcm0iLCJoYW5kbGVGb3JtU3VibWl0Iiwic3VwZXIiLCJfcG9wdXBGb3JtIiwiX3N1Ym1pdEJ1dHRvbiIsIl9pbnB1dHNBcnJheSIsInJlbmRlckxvYWRpbmciLCJpc0xvYWRpbmciLCJnZXRQb3B1cEZvcm0iLCJfZ2V0SW5wdXRWYWx1ZXMiLCJpbnB1dFZhbHVlcyIsIm5hbWUiLCJ2YWx1ZSIsImNhcmRUZW1wbGF0ZUVsZW1lbnQiLCJyZW5kZXJDYXJkIiwiY2FyZCIsImltYWdlUG9wdXAiLCJjb25maXJtTW9kYWwiLCJzZXRBY3Rpb24iLCJhcGkiLCJkZWxldGVDYXJkIiwidGhlbiIsInJlcyIsImRpc0xpa2VDYXJkIiwiY29uc29sZSIsImxvZyIsImxpa2VDYXJkIiwiYmFzZVVybCIsImhlYWRlcnMiLCJhc3luYyIsInVybCIsImZldGNoIiwib2siLCJqc29uIiwiUHJvbWlzZSIsInJlamVjdCIsInN0YXR1c1RleHQiLCJtZXNzYWdlIiwiX2Jhc2VVcmwiLCJfaGVhZGVycyIsImdldEluaXRpYWxDYXJkcyIsIl9jdXN0b21GZXRjaCIsImdldFVzZXJJbmZvIiwic2V0QXZhdGFyTGluayIsIkpTT04iLCJzdHJpbmdpZnkiLCJtZXRob2QiLCJib2R5IiwiYXZhdGFyIiwic2V0VXNlckluZm8iLCJjcmVhdGVDYXJkIiwiY2FyZElkIiwiYXV0aG9yaXphdGlvbiIsImNhcmRMaXN0U2VjdGlvbiIsInVzZXJJZCIsInVzZXJJbmZvIiwicHJvZmlsZUZvcm1OYW1lSW5wdXQiLCJwcm9maWxlRm9ybVJvbGVJbnB1dCIsImFib3V0IiwiYXZhdGFyTGluayIsImNvcnJlY3RPYmplY3QiLCJhbGwiLCJjYXJkRGF0YSIsInVzZXJEYXRhIiwiaSIsImNyZWF0ZWRBdCIsImxpbmsiLCJwdXNoIiwibmFtZVNlbGVjdG9yIiwiam9iU2VsZWN0b3IiLCJhdmF0YXJTZWxlY3RvciIsIl9uYW1lU2VsZWN0b3IiLCJfam9iU2VsZWN0b3IiLCJfbmFtZUVsZW1lbnQiLCJfam9iRWxlbWVudCIsIl9hdmF0YXIiLCJqb2IiLCJpbmZvIiwic2V0VXNlckF2YXRhciIsImVkaXRQcm9maWxlUG9wdXAiLCJjYXRjaCIsImVyciIsImZpbmFsbHkiLCJhZGRDYXJkUG9wdXAiLCJlZGl0QXZhdGFyUG9wdXAiLCJ1c2VyZGF0YSIsIl9wcmV2aWV3UG9wdXBJbWFnZSIsIl9wcmV2aWV3UG9wdXBEZXNjcmlwdGlvbiIsImFjdGlvbiIsIl9zdWJtaXRIYW5kbGVyIiwiYWRkQ2FyZEZvcm0iLCJGb3JtVmFsaWRhdG9yIiwiZWRpdEZvcm0iLCJlZGl0QXZhdGFyRm9ybSJdLCJzb3VyY2VSb290IjoiIn0=